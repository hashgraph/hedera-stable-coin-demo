/*
 * This file is generated by jOOQ.
 */
package com.hedera.hashgraph.stablecoin.platform.db.tables;


import com.hedera.hashgraph.stablecoin.platform.db.Public;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShowChunks extends TableImpl<Record> {

    private static final long serialVersionUID = 1900254569;

    /**
     * The reference instance of <code>public.show_chunks</code>
     */
    public static final ShowChunks SHOW_CHUNKS = new ShowChunks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<Record, Object> SHOW_CHUNKS_ = createField(DSL.name("show_chunks"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"regclass\""), this, "");

    /**
     * Create a <code>public.show_chunks</code> table reference
     */
    public ShowChunks() {
        this(DSL.name("show_chunks"), null);
    }

    /**
     * Create an aliased <code>public.show_chunks</code> table reference
     */
    public ShowChunks(String alias) {
        this(DSL.name(alias), SHOW_CHUNKS);
    }

    /**
     * Create an aliased <code>public.show_chunks</code> table reference
     */
    public ShowChunks(Name alias) {
        this(alias, SHOW_CHUNKS);
    }

    private ShowChunks(Name alias, Table<Record> aliased) {
        this(alias, aliased, new Field[3]);
    }

    private ShowChunks(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public <O extends Record> ShowChunks(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SHOW_CHUNKS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ShowChunks as(String alias) {
        return new ShowChunks(DSL.name(alias), this, parameters);
    }

    @Override
    public ShowChunks as(Name alias) {
        return new ShowChunks(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ShowChunks rename(String name) {
        return new ShowChunks(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ShowChunks rename(Name name) {
        return new ShowChunks(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public ShowChunks call(Object hypertable, Object olderThan, Object newerThan) {
        return new ShowChunks(DSL.name(getName()), null, new Field[] { 
              DSL.val(hypertable, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regclass\"").defaultValue(org.jooq.impl.DSL.field("NULL::regclass", org.jooq.impl.SQLDataType.OTHER)))
            , DSL.val(olderThan, org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("NULL::unknown", org.jooq.impl.SQLDataType.OTHER)))
            , DSL.val(newerThan, org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("NULL::unknown", org.jooq.impl.SQLDataType.OTHER)))
        });
    }

    /**
     * Call this table-valued function
     */
    public ShowChunks call(Field<Object> hypertable, Field<Object> olderThan, Field<Object> newerThan) {
        return new ShowChunks(DSL.name(getName()), null, new Field[] { 
              hypertable
            , olderThan
            , newerThan
        });
    }
}
