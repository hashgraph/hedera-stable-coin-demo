/*
 * This file is generated by jOOQ.
 */
package com.hedera.hashgraph.stablecoin.platform.db;


import com.hedera.hashgraph.stablecoin.platform.db.routines.AddCompressChunksPolicy;
import com.hedera.hashgraph.stablecoin.platform.db.routines.AddDropChunksPolicy;
import com.hedera.hashgraph.stablecoin.platform.db.routines.AddReorderPolicy;
import com.hedera.hashgraph.stablecoin.platform.db.routines.AttachTablespace;
import com.hedera.hashgraph.stablecoin.platform.db.routines.CompressChunk;
import com.hedera.hashgraph.stablecoin.platform.db.routines.DecompressChunk;
import com.hedera.hashgraph.stablecoin.platform.db.routines.DetachTablespace;
import com.hedera.hashgraph.stablecoin.platform.db.routines.DetachTablespaces;
import com.hedera.hashgraph.stablecoin.platform.db.routines.First;
import com.hedera.hashgraph.stablecoin.platform.db.routines.GetTelemetryReport;
import com.hedera.hashgraph.stablecoin.platform.db.routines.Histogram;
import com.hedera.hashgraph.stablecoin.platform.db.routines.Interpolate1;
import com.hedera.hashgraph.stablecoin.platform.db.routines.Interpolate2;
import com.hedera.hashgraph.stablecoin.platform.db.routines.Interpolate3;
import com.hedera.hashgraph.stablecoin.platform.db.routines.Interpolate4;
import com.hedera.hashgraph.stablecoin.platform.db.routines.Interpolate5;
import com.hedera.hashgraph.stablecoin.platform.db.routines.Last;
import com.hedera.hashgraph.stablecoin.platform.db.routines.Locf;
import com.hedera.hashgraph.stablecoin.platform.db.routines.MoveChunk;
import com.hedera.hashgraph.stablecoin.platform.db.routines.RemoveCompressChunksPolicy;
import com.hedera.hashgraph.stablecoin.platform.db.routines.RemoveDropChunksPolicy;
import com.hedera.hashgraph.stablecoin.platform.db.routines.RemoveReorderPolicy;
import com.hedera.hashgraph.stablecoin.platform.db.routines.ReorderChunk;
import com.hedera.hashgraph.stablecoin.platform.db.routines.SetAdaptiveChunking;
import com.hedera.hashgraph.stablecoin.platform.db.routines.SetChunkTimeInterval;
import com.hedera.hashgraph.stablecoin.platform.db.routines.SetIntegerNowFunc;
import com.hedera.hashgraph.stablecoin.platform.db.routines.SetNumberPartitions;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket1;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket10;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket11;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket12;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket13;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket14;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket15;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket2;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket3;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket4;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket5;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket6;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket7;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket8;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucket9;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucketGapfill1;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucketGapfill2;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucketGapfill3;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucketGapfill4;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucketGapfill5;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimeBucketGapfill6;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimescaledbPostRestore;
import com.hedera.hashgraph.stablecoin.platform.db.routines.TimescaledbPreRestore;
import com.hedera.hashgraph.stablecoin.platform.db.tables.AddDimension;
import com.hedera.hashgraph.stablecoin.platform.db.tables.AlterJobSchedule;
import com.hedera.hashgraph.stablecoin.platform.db.tables.ChunkRelationSize;
import com.hedera.hashgraph.stablecoin.platform.db.tables.ChunkRelationSizePretty;
import com.hedera.hashgraph.stablecoin.platform.db.tables.CreateHypertable;
import com.hedera.hashgraph.stablecoin.platform.db.tables.DropChunks;
import com.hedera.hashgraph.stablecoin.platform.db.tables.HypertableApproximateRowCount;
import com.hedera.hashgraph.stablecoin.platform.db.tables.HypertableRelationSize;
import com.hedera.hashgraph.stablecoin.platform.db.tables.HypertableRelationSizePretty;
import com.hedera.hashgraph.stablecoin.platform.db.tables.IndexesRelationSize;
import com.hedera.hashgraph.stablecoin.platform.db.tables.IndexesRelationSizePretty;
import com.hedera.hashgraph.stablecoin.platform.db.tables.ShowChunks;
import com.hedera.hashgraph.stablecoin.platform.db.tables.ShowTablespaces;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;

import org.jooq.AggregateFunction;
import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Result;
import org.jooq.types.YearToSecond;


/**
 * Convenience access to all stored procedures and functions in public
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Routines {

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Integer addCompressChunksPolicy(Configuration configuration, Object hypertable, Object olderThan, Boolean ifNotExists) {
        AddCompressChunksPolicy f = new AddCompressChunksPolicy();
        f.setHypertable(hypertable);
        f.setOlderThan(olderThan);
        f.setIfNotExists(ifNotExists);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Integer> addCompressChunksPolicy(Object hypertable, Object olderThan, Boolean ifNotExists) {
        AddCompressChunksPolicy f = new AddCompressChunksPolicy();
        f.setHypertable(hypertable);
        f.setOlderThan(olderThan);
        f.setIfNotExists(ifNotExists);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Integer> addCompressChunksPolicy(Field<Object> hypertable, Field<Object> olderThan, Field<Boolean> ifNotExists) {
        AddCompressChunksPolicy f = new AddCompressChunksPolicy();
        f.setHypertable(hypertable);
        f.setOlderThan(olderThan);
        f.setIfNotExists(ifNotExists);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Integer addDropChunksPolicy(Configuration configuration, Object hypertable, Object olderThan, Boolean cascade, Boolean ifNotExists, Boolean cascadeToMaterializations) {
        AddDropChunksPolicy f = new AddDropChunksPolicy();
        f.setHypertable(hypertable);
        f.setOlderThan(olderThan);
        f.setCascade(cascade);
        f.setIfNotExists(ifNotExists);
        f.setCascadeToMaterializations(cascadeToMaterializations);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Integer> addDropChunksPolicy(Object hypertable, Object olderThan, Boolean cascade, Boolean ifNotExists, Boolean cascadeToMaterializations) {
        AddDropChunksPolicy f = new AddDropChunksPolicy();
        f.setHypertable(hypertable);
        f.setOlderThan(olderThan);
        f.setCascade(cascade);
        f.setIfNotExists(ifNotExists);
        f.setCascadeToMaterializations(cascadeToMaterializations);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Integer> addDropChunksPolicy(Field<Object> hypertable, Field<Object> olderThan, Field<Boolean> cascade, Field<Boolean> ifNotExists, Field<Boolean> cascadeToMaterializations) {
        AddDropChunksPolicy f = new AddDropChunksPolicy();
        f.setHypertable(hypertable);
        f.setOlderThan(olderThan);
        f.setCascade(cascade);
        f.setIfNotExists(ifNotExists);
        f.setCascadeToMaterializations(cascadeToMaterializations);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Integer addReorderPolicy(Configuration configuration, Object hypertable, String indexName, Boolean ifNotExists) {
        AddReorderPolicy f = new AddReorderPolicy();
        f.setHypertable(hypertable);
        f.setIndexName(indexName);
        f.setIfNotExists(ifNotExists);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Integer> addReorderPolicy(Object hypertable, String indexName, Boolean ifNotExists) {
        AddReorderPolicy f = new AddReorderPolicy();
        f.setHypertable(hypertable);
        f.setIndexName(indexName);
        f.setIfNotExists(ifNotExists);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Integer> addReorderPolicy(Field<Object> hypertable, Field<String> indexName, Field<Boolean> ifNotExists) {
        AddReorderPolicy f = new AddReorderPolicy();
        f.setHypertable(hypertable);
        f.setIndexName(indexName);
        f.setIfNotExists(ifNotExists);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static void attachTablespace(Configuration configuration, String tablespace, Object hypertable, Boolean ifNotAttached) {
        AttachTablespace p = new AttachTablespace();
        p.setTablespace(tablespace);
        p.setHypertable(hypertable);
        p.setIfNotAttached(ifNotAttached);

        p.execute(configuration);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Object compressChunk(Configuration configuration, Object uncompressedChunk, Boolean ifNotCompressed) {
        CompressChunk f = new CompressChunk();
        f.setUncompressedChunk(uncompressedChunk);
        f.setIfNotCompressed(ifNotCompressed);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Object> compressChunk(Object uncompressedChunk, Boolean ifNotCompressed) {
        CompressChunk f = new CompressChunk();
        f.setUncompressedChunk(uncompressedChunk);
        f.setIfNotCompressed(ifNotCompressed);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Object> compressChunk(Field<Object> uncompressedChunk, Field<Boolean> ifNotCompressed) {
        CompressChunk f = new CompressChunk();
        f.setUncompressedChunk(uncompressedChunk);
        f.setIfNotCompressed(ifNotCompressed);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Object decompressChunk(Configuration configuration, Object uncompressedChunk, Boolean ifCompressed) {
        DecompressChunk f = new DecompressChunk();
        f.setUncompressedChunk(uncompressedChunk);
        f.setIfCompressed(ifCompressed);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Object> decompressChunk(Object uncompressedChunk, Boolean ifCompressed) {
        DecompressChunk f = new DecompressChunk();
        f.setUncompressedChunk(uncompressedChunk);
        f.setIfCompressed(ifCompressed);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Object> decompressChunk(Field<Object> uncompressedChunk, Field<Boolean> ifCompressed) {
        DecompressChunk f = new DecompressChunk();
        f.setUncompressedChunk(uncompressedChunk);
        f.setIfCompressed(ifCompressed);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Integer detachTablespace(Configuration configuration, String tablespace, Object hypertable, Boolean ifAttached) {
        DetachTablespace f = new DetachTablespace();
        f.setTablespace(tablespace);
        f.setHypertable(hypertable);
        f.setIfAttached(ifAttached);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Integer> detachTablespace(String tablespace, Object hypertable, Boolean ifAttached) {
        DetachTablespace f = new DetachTablespace();
        f.setTablespace(tablespace);
        f.setHypertable(hypertable);
        f.setIfAttached(ifAttached);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Integer> detachTablespace(Field<String> tablespace, Field<Object> hypertable, Field<Boolean> ifAttached) {
        DetachTablespace f = new DetachTablespace();
        f.setTablespace(tablespace);
        f.setHypertable(hypertable);
        f.setIfAttached(ifAttached);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Integer detachTablespaces(Configuration configuration, Object hypertable) {
        DetachTablespaces f = new DetachTablespaces();
        f.setHypertable(hypertable);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Integer> detachTablespaces(Object hypertable) {
        DetachTablespaces f = new DetachTablespaces();
        f.setHypertable(hypertable);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Integer> detachTablespaces(Field<Object> hypertable) {
        DetachTablespaces f = new DetachTablespaces();
        f.setHypertable(hypertable);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static AggregateFunction<Object> first(Object __1, Object __2) {
        First f = new First();
        f.set__1(__1);
        f.set__2(__2);

        return f.asAggregateFunction();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static AggregateFunction<Object> first(Field<Object> __1, Field<Object> __2) {
        First f = new First();
        f.set__1(__1);
        f.set__2(__2);

        return f.asAggregateFunction();
    }

    /**
     * Call <code>public.get_telemetry_report</code>
     */
    public static String getTelemetryReport(Configuration configuration, Boolean alwaysDisplayReport) {
        GetTelemetryReport f = new GetTelemetryReport();
        f.setAlwaysDisplayReport(alwaysDisplayReport);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.get_telemetry_report</code> as a field.
     */
    public static Field<String> getTelemetryReport(Boolean alwaysDisplayReport) {
        GetTelemetryReport f = new GetTelemetryReport();
        f.setAlwaysDisplayReport(alwaysDisplayReport);

        return f.asField();
    }

    /**
     * Get <code>public.get_telemetry_report</code> as a field.
     */
    public static Field<String> getTelemetryReport(Field<Boolean> alwaysDisplayReport) {
        GetTelemetryReport f = new GetTelemetryReport();
        f.setAlwaysDisplayReport(alwaysDisplayReport);

        return f.asField();
    }

    /**
     * Get <code>public.histogram</code> as a field.
     */
    public static AggregateFunction<Integer[]> histogram(Double __1, Double __2, Double __3, Integer __4) {
        Histogram f = new Histogram();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);
        f.set__4(__4);

        return f.asAggregateFunction();
    }

    /**
     * Get <code>public.histogram</code> as a field.
     */
    public static AggregateFunction<Integer[]> histogram(Field<Double> __1, Field<Double> __2, Field<Double> __3, Field<Integer> __4) {
        Histogram f = new Histogram();
        f.set__1(__1);
        f.set__2(__2);
        f.set__3(__3);
        f.set__4(__4);

        return f.asAggregateFunction();
    }

    /**
     * Call <code>public.interpolate</code>
     */
    public static Short interpolate1(Configuration configuration, Short value, Record prev, Record next) {
        Interpolate1 f = new Interpolate1();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.interpolate</code> as a field.
     */
    public static Field<Short> interpolate1(Short value, Record prev, Record next) {
        Interpolate1 f = new Interpolate1();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        return f.asField();
    }

    /**
     * Get <code>public.interpolate</code> as a field.
     */
    public static Field<Short> interpolate1(Field<Short> value, Field<Record> prev, Field<Record> next) {
        Interpolate1 f = new Interpolate1();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        return f.asField();
    }

    /**
     * Call <code>public.interpolate</code>
     */
    public static Integer interpolate2(Configuration configuration, Integer value, Record prev, Record next) {
        Interpolate2 f = new Interpolate2();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.interpolate</code> as a field.
     */
    public static Field<Integer> interpolate2(Integer value, Record prev, Record next) {
        Interpolate2 f = new Interpolate2();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        return f.asField();
    }

    /**
     * Get <code>public.interpolate</code> as a field.
     */
    public static Field<Integer> interpolate2(Field<Integer> value, Field<Record> prev, Field<Record> next) {
        Interpolate2 f = new Interpolate2();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        return f.asField();
    }

    /**
     * Call <code>public.interpolate</code>
     */
    public static Long interpolate3(Configuration configuration, Long value, Record prev, Record next) {
        Interpolate3 f = new Interpolate3();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.interpolate</code> as a field.
     */
    public static Field<Long> interpolate3(Long value, Record prev, Record next) {
        Interpolate3 f = new Interpolate3();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        return f.asField();
    }

    /**
     * Get <code>public.interpolate</code> as a field.
     */
    public static Field<Long> interpolate3(Field<Long> value, Field<Record> prev, Field<Record> next) {
        Interpolate3 f = new Interpolate3();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        return f.asField();
    }

    /**
     * Call <code>public.interpolate</code>
     */
    public static Float interpolate4(Configuration configuration, Float value, Record prev, Record next) {
        Interpolate4 f = new Interpolate4();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.interpolate</code> as a field.
     */
    public static Field<Float> interpolate4(Float value, Record prev, Record next) {
        Interpolate4 f = new Interpolate4();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        return f.asField();
    }

    /**
     * Get <code>public.interpolate</code> as a field.
     */
    public static Field<Float> interpolate4(Field<Float> value, Field<Record> prev, Field<Record> next) {
        Interpolate4 f = new Interpolate4();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        return f.asField();
    }

    /**
     * Call <code>public.interpolate</code>
     */
    public static Double interpolate5(Configuration configuration, Double value, Record prev, Record next) {
        Interpolate5 f = new Interpolate5();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.interpolate</code> as a field.
     */
    public static Field<Double> interpolate5(Double value, Record prev, Record next) {
        Interpolate5 f = new Interpolate5();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        return f.asField();
    }

    /**
     * Get <code>public.interpolate</code> as a field.
     */
    public static Field<Double> interpolate5(Field<Double> value, Field<Record> prev, Field<Record> next) {
        Interpolate5 f = new Interpolate5();
        f.setValue(value);
        f.setPrev(prev);
        f.setNext(next);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static AggregateFunction<Object> last(Object __1, Object __2) {
        Last f = new Last();
        f.set__1(__1);
        f.set__2(__2);

        return f.asAggregateFunction();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static AggregateFunction<Object> last(Field<Object> __1, Field<Object> __2) {
        Last f = new Last();
        f.set__1(__1);
        f.set__2(__2);

        return f.asAggregateFunction();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Object locf(Configuration configuration, Object value, Object prev, Boolean treatNullAsMissing) {
        Locf f = new Locf();
        f.setValue(value);
        f.setPrev(prev);
        f.setTreatNullAsMissing(treatNullAsMissing);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Object> locf(Object value, Object prev, Boolean treatNullAsMissing) {
        Locf f = new Locf();
        f.setValue(value);
        f.setPrev(prev);
        f.setTreatNullAsMissing(treatNullAsMissing);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Object> locf(Field<Object> value, Field<Object> prev, Field<Boolean> treatNullAsMissing) {
        Locf f = new Locf();
        f.setValue(value);
        f.setPrev(prev);
        f.setTreatNullAsMissing(treatNullAsMissing);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static void moveChunk(Configuration configuration, Object chunk, String destinationTablespace, String indexDestinationTablespace, Object reorderIndex, Boolean verbose) {
        MoveChunk p = new MoveChunk();
        p.setChunk(chunk);
        p.setDestinationTablespace(destinationTablespace);
        p.setIndexDestinationTablespace(indexDestinationTablespace);
        p.setReorderIndex(reorderIndex);
        p.setVerbose(verbose);

        p.execute(configuration);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Boolean removeCompressChunksPolicy(Configuration configuration, Object hypertable, Boolean ifExists) {
        RemoveCompressChunksPolicy f = new RemoveCompressChunksPolicy();
        f.setHypertable(hypertable);
        f.setIfExists(ifExists);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Boolean> removeCompressChunksPolicy(Object hypertable, Boolean ifExists) {
        RemoveCompressChunksPolicy f = new RemoveCompressChunksPolicy();
        f.setHypertable(hypertable);
        f.setIfExists(ifExists);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Field<Boolean> removeCompressChunksPolicy(Field<Object> hypertable, Field<Boolean> ifExists) {
        RemoveCompressChunksPolicy f = new RemoveCompressChunksPolicy();
        f.setHypertable(hypertable);
        f.setIfExists(ifExists);

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static void removeDropChunksPolicy(Configuration configuration, Object hypertable, Boolean ifExists) {
        RemoveDropChunksPolicy p = new RemoveDropChunksPolicy();
        p.setHypertable(hypertable);
        p.setIfExists(ifExists);

        p.execute(configuration);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static void removeReorderPolicy(Configuration configuration, Object hypertable, Boolean ifExists) {
        RemoveReorderPolicy p = new RemoveReorderPolicy();
        p.setHypertable(hypertable);
        p.setIfExists(ifExists);

        p.execute(configuration);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static void reorderChunk(Configuration configuration, Object chunk, Object index, Boolean verbose) {
        ReorderChunk p = new ReorderChunk();
        p.setChunk(chunk);
        p.setIndex(index);
        p.setVerbose(verbose);

        p.execute(configuration);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static SetAdaptiveChunking setAdaptiveChunking(Configuration configuration, Object hypertable, String chunkTargetSize, String chunkSizingFunc) {
        SetAdaptiveChunking p = new SetAdaptiveChunking();
        p.setHypertable(hypertable);
        p.setChunkTargetSize2(chunkTargetSize);
        p.setChunkSizingFunc(chunkSizingFunc);

        p.execute(configuration);
        return p;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static void setChunkTimeInterval(Configuration configuration, Object mainTable, Object chunkTimeInterval, String dimensionName) {
        SetChunkTimeInterval p = new SetChunkTimeInterval();
        p.setMainTable(mainTable);
        p.setChunkTimeInterval(chunkTimeInterval);
        p.setDimensionName(dimensionName);

        p.execute(configuration);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static void setIntegerNowFunc(Configuration configuration, Object hypertable, String integerNowFunc, Boolean replaceIfExists) {
        SetIntegerNowFunc p = new SetIntegerNowFunc();
        p.setHypertable(hypertable);
        p.setIntegerNowFunc(integerNowFunc);
        p.setReplaceIfExists(replaceIfExists);

        p.execute(configuration);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static void setNumberPartitions(Configuration configuration, Object mainTable, Integer numberPartitions, String dimensionName) {
        SetNumberPartitions p = new SetNumberPartitions();
        p.setMainTable(mainTable);
        p.setNumberPartitions(numberPartitions);
        p.setDimensionName(dimensionName);

        p.execute(configuration);
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static LocalDateTime timeBucket1(Configuration configuration, YearToSecond bucketWidth, LocalDateTime ts) {
        TimeBucket1 f = new TimeBucket1();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<LocalDateTime> timeBucket1(YearToSecond bucketWidth, LocalDateTime ts) {
        TimeBucket1 f = new TimeBucket1();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<LocalDateTime> timeBucket1(Field<YearToSecond> bucketWidth, Field<LocalDateTime> ts) {
        TimeBucket1 f = new TimeBucket1();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static OffsetDateTime timeBucket2(Configuration configuration, YearToSecond bucketWidth, OffsetDateTime ts) {
        TimeBucket2 f = new TimeBucket2();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<OffsetDateTime> timeBucket2(YearToSecond bucketWidth, OffsetDateTime ts) {
        TimeBucket2 f = new TimeBucket2();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<OffsetDateTime> timeBucket2(Field<YearToSecond> bucketWidth, Field<OffsetDateTime> ts) {
        TimeBucket2 f = new TimeBucket2();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static LocalDate timeBucket3(Configuration configuration, YearToSecond bucketWidth, LocalDate ts) {
        TimeBucket3 f = new TimeBucket3();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<LocalDate> timeBucket3(YearToSecond bucketWidth, LocalDate ts) {
        TimeBucket3 f = new TimeBucket3();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<LocalDate> timeBucket3(Field<YearToSecond> bucketWidth, Field<LocalDate> ts) {
        TimeBucket3 f = new TimeBucket3();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static LocalDateTime timeBucket4(Configuration configuration, YearToSecond bucketWidth, LocalDateTime ts, LocalDateTime origin) {
        TimeBucket4 f = new TimeBucket4();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOrigin(origin);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<LocalDateTime> timeBucket4(YearToSecond bucketWidth, LocalDateTime ts, LocalDateTime origin) {
        TimeBucket4 f = new TimeBucket4();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOrigin(origin);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<LocalDateTime> timeBucket4(Field<YearToSecond> bucketWidth, Field<LocalDateTime> ts, Field<LocalDateTime> origin) {
        TimeBucket4 f = new TimeBucket4();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOrigin(origin);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static OffsetDateTime timeBucket5(Configuration configuration, YearToSecond bucketWidth, OffsetDateTime ts, OffsetDateTime origin) {
        TimeBucket5 f = new TimeBucket5();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOrigin(origin);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<OffsetDateTime> timeBucket5(YearToSecond bucketWidth, OffsetDateTime ts, OffsetDateTime origin) {
        TimeBucket5 f = new TimeBucket5();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOrigin(origin);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<OffsetDateTime> timeBucket5(Field<YearToSecond> bucketWidth, Field<OffsetDateTime> ts, Field<OffsetDateTime> origin) {
        TimeBucket5 f = new TimeBucket5();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOrigin(origin);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static LocalDate timeBucket6(Configuration configuration, YearToSecond bucketWidth, LocalDate ts, LocalDate origin) {
        TimeBucket6 f = new TimeBucket6();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOrigin(origin);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<LocalDate> timeBucket6(YearToSecond bucketWidth, LocalDate ts, LocalDate origin) {
        TimeBucket6 f = new TimeBucket6();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOrigin(origin);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<LocalDate> timeBucket6(Field<YearToSecond> bucketWidth, Field<LocalDate> ts, Field<LocalDate> origin) {
        TimeBucket6 f = new TimeBucket6();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOrigin(origin);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static Short timeBucket7(Configuration configuration, Short bucketWidth, Short ts) {
        TimeBucket7 f = new TimeBucket7();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<Short> timeBucket7(Short bucketWidth, Short ts) {
        TimeBucket7 f = new TimeBucket7();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<Short> timeBucket7(Field<Short> bucketWidth, Field<Short> ts) {
        TimeBucket7 f = new TimeBucket7();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static Integer timeBucket8(Configuration configuration, Integer bucketWidth, Integer ts) {
        TimeBucket8 f = new TimeBucket8();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<Integer> timeBucket8(Integer bucketWidth, Integer ts) {
        TimeBucket8 f = new TimeBucket8();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<Integer> timeBucket8(Field<Integer> bucketWidth, Field<Integer> ts) {
        TimeBucket8 f = new TimeBucket8();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static Long timeBucket9(Configuration configuration, Long bucketWidth, Long ts) {
        TimeBucket9 f = new TimeBucket9();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<Long> timeBucket9(Long bucketWidth, Long ts) {
        TimeBucket9 f = new TimeBucket9();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<Long> timeBucket9(Field<Long> bucketWidth, Field<Long> ts) {
        TimeBucket9 f = new TimeBucket9();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static Short timeBucket10(Configuration configuration, Short bucketWidth, Short ts, Short offset) {
        TimeBucket10 f = new TimeBucket10();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<Short> timeBucket10(Short bucketWidth, Short ts, Short offset) {
        TimeBucket10 f = new TimeBucket10();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<Short> timeBucket10(Field<Short> bucketWidth, Field<Short> ts, Field<Short> offset) {
        TimeBucket10 f = new TimeBucket10();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static Integer timeBucket11(Configuration configuration, Integer bucketWidth, Integer ts, Integer offset) {
        TimeBucket11 f = new TimeBucket11();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<Integer> timeBucket11(Integer bucketWidth, Integer ts, Integer offset) {
        TimeBucket11 f = new TimeBucket11();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<Integer> timeBucket11(Field<Integer> bucketWidth, Field<Integer> ts, Field<Integer> offset) {
        TimeBucket11 f = new TimeBucket11();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static Long timeBucket12(Configuration configuration, Long bucketWidth, Long ts, Long offset) {
        TimeBucket12 f = new TimeBucket12();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<Long> timeBucket12(Long bucketWidth, Long ts, Long offset) {
        TimeBucket12 f = new TimeBucket12();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<Long> timeBucket12(Field<Long> bucketWidth, Field<Long> ts, Field<Long> offset) {
        TimeBucket12 f = new TimeBucket12();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static LocalDateTime timeBucket13(Configuration configuration, YearToSecond bucketWidth, LocalDateTime ts, YearToSecond offset) {
        TimeBucket13 f = new TimeBucket13();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<LocalDateTime> timeBucket13(YearToSecond bucketWidth, LocalDateTime ts, YearToSecond offset) {
        TimeBucket13 f = new TimeBucket13();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<LocalDateTime> timeBucket13(Field<YearToSecond> bucketWidth, Field<LocalDateTime> ts, Field<YearToSecond> offset) {
        TimeBucket13 f = new TimeBucket13();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static OffsetDateTime timeBucket14(Configuration configuration, YearToSecond bucketWidth, OffsetDateTime ts, YearToSecond offset) {
        TimeBucket14 f = new TimeBucket14();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<OffsetDateTime> timeBucket14(YearToSecond bucketWidth, OffsetDateTime ts, YearToSecond offset) {
        TimeBucket14 f = new TimeBucket14();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<OffsetDateTime> timeBucket14(Field<YearToSecond> bucketWidth, Field<OffsetDateTime> ts, Field<YearToSecond> offset) {
        TimeBucket14 f = new TimeBucket14();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket</code>
     */
    public static LocalDate timeBucket15(Configuration configuration, YearToSecond bucketWidth, LocalDate ts, YearToSecond offset) {
        TimeBucket15 f = new TimeBucket15();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<LocalDate> timeBucket15(YearToSecond bucketWidth, LocalDate ts, YearToSecond offset) {
        TimeBucket15 f = new TimeBucket15();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket</code> as a field.
     */
    public static Field<LocalDate> timeBucket15(Field<YearToSecond> bucketWidth, Field<LocalDate> ts, Field<YearToSecond> offset) {
        TimeBucket15 f = new TimeBucket15();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setOffset(offset);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket_gapfill</code>
     */
    public static Short timeBucketGapfill1(Configuration configuration, Short bucketWidth, Short ts, Short start, Short finish) {
        TimeBucketGapfill1 f = new TimeBucketGapfill1();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket_gapfill</code> as a field.
     */
    public static Field<Short> timeBucketGapfill1(Short bucketWidth, Short ts, Short start, Short finish) {
        TimeBucketGapfill1 f = new TimeBucketGapfill1();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket_gapfill</code> as a field.
     */
    public static Field<Short> timeBucketGapfill1(Field<Short> bucketWidth, Field<Short> ts, Field<Short> start, Field<Short> finish) {
        TimeBucketGapfill1 f = new TimeBucketGapfill1();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket_gapfill</code>
     */
    public static Integer timeBucketGapfill2(Configuration configuration, Integer bucketWidth, Integer ts, Integer start, Integer finish) {
        TimeBucketGapfill2 f = new TimeBucketGapfill2();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket_gapfill</code> as a field.
     */
    public static Field<Integer> timeBucketGapfill2(Integer bucketWidth, Integer ts, Integer start, Integer finish) {
        TimeBucketGapfill2 f = new TimeBucketGapfill2();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket_gapfill</code> as a field.
     */
    public static Field<Integer> timeBucketGapfill2(Field<Integer> bucketWidth, Field<Integer> ts, Field<Integer> start, Field<Integer> finish) {
        TimeBucketGapfill2 f = new TimeBucketGapfill2();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket_gapfill</code>
     */
    public static Long timeBucketGapfill3(Configuration configuration, Long bucketWidth, Long ts, Long start, Long finish) {
        TimeBucketGapfill3 f = new TimeBucketGapfill3();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket_gapfill</code> as a field.
     */
    public static Field<Long> timeBucketGapfill3(Long bucketWidth, Long ts, Long start, Long finish) {
        TimeBucketGapfill3 f = new TimeBucketGapfill3();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket_gapfill</code> as a field.
     */
    public static Field<Long> timeBucketGapfill3(Field<Long> bucketWidth, Field<Long> ts, Field<Long> start, Field<Long> finish) {
        TimeBucketGapfill3 f = new TimeBucketGapfill3();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket_gapfill</code>
     */
    public static LocalDate timeBucketGapfill4(Configuration configuration, YearToSecond bucketWidth, LocalDate ts, LocalDate start, LocalDate finish) {
        TimeBucketGapfill4 f = new TimeBucketGapfill4();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket_gapfill</code> as a field.
     */
    public static Field<LocalDate> timeBucketGapfill4(YearToSecond bucketWidth, LocalDate ts, LocalDate start, LocalDate finish) {
        TimeBucketGapfill4 f = new TimeBucketGapfill4();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket_gapfill</code> as a field.
     */
    public static Field<LocalDate> timeBucketGapfill4(Field<YearToSecond> bucketWidth, Field<LocalDate> ts, Field<LocalDate> start, Field<LocalDate> finish) {
        TimeBucketGapfill4 f = new TimeBucketGapfill4();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket_gapfill</code>
     */
    public static LocalDateTime timeBucketGapfill5(Configuration configuration, YearToSecond bucketWidth, LocalDateTime ts, LocalDateTime start, LocalDateTime finish) {
        TimeBucketGapfill5 f = new TimeBucketGapfill5();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket_gapfill</code> as a field.
     */
    public static Field<LocalDateTime> timeBucketGapfill5(YearToSecond bucketWidth, LocalDateTime ts, LocalDateTime start, LocalDateTime finish) {
        TimeBucketGapfill5 f = new TimeBucketGapfill5();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket_gapfill</code> as a field.
     */
    public static Field<LocalDateTime> timeBucketGapfill5(Field<YearToSecond> bucketWidth, Field<LocalDateTime> ts, Field<LocalDateTime> start, Field<LocalDateTime> finish) {
        TimeBucketGapfill5 f = new TimeBucketGapfill5();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        return f.asField();
    }

    /**
     * Call <code>public.time_bucket_gapfill</code>
     */
    public static OffsetDateTime timeBucketGapfill6(Configuration configuration, YearToSecond bucketWidth, OffsetDateTime ts, OffsetDateTime start, OffsetDateTime finish) {
        TimeBucketGapfill6 f = new TimeBucketGapfill6();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.time_bucket_gapfill</code> as a field.
     */
    public static Field<OffsetDateTime> timeBucketGapfill6(YearToSecond bucketWidth, OffsetDateTime ts, OffsetDateTime start, OffsetDateTime finish) {
        TimeBucketGapfill6 f = new TimeBucketGapfill6();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        return f.asField();
    }

    /**
     * Get <code>public.time_bucket_gapfill</code> as a field.
     */
    public static Field<OffsetDateTime> timeBucketGapfill6(Field<YearToSecond> bucketWidth, Field<OffsetDateTime> ts, Field<OffsetDateTime> start, Field<OffsetDateTime> finish) {
        TimeBucketGapfill6 f = new TimeBucketGapfill6();
        f.setBucketWidth(bucketWidth);
        f.setTs(ts);
        f.setStart(start);
        f.setFinish(finish);

        return f.asField();
    }

    /**
     * Call <code>public.timescaledb_post_restore</code>
     */
    public static Boolean timescaledbPostRestore(Configuration configuration) {
        TimescaledbPostRestore f = new TimescaledbPostRestore();

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.timescaledb_post_restore</code> as a field.
     */
    public static Field<Boolean> timescaledbPostRestore() {
        TimescaledbPostRestore f = new TimescaledbPostRestore();

        return f.asField();
    }

    /**
     * Call <code>public.timescaledb_pre_restore</code>
     */
    public static Boolean timescaledbPreRestore(Configuration configuration) {
        TimescaledbPreRestore f = new TimescaledbPreRestore();

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.timescaledb_pre_restore</code> as a field.
     */
    public static Field<Boolean> timescaledbPreRestore() {
        TimescaledbPreRestore f = new TimescaledbPreRestore();

        return f.asField();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<Record> addDimension(Configuration configuration, Object mainTable, String columnName, Integer numberPartitions, Object chunkTimeInterval, String partitioningFunc, Boolean ifNotExists) {
        return configuration.dsl().selectFrom(com.hedera.hashgraph.stablecoin.platform.db.tables.AddDimension.ADD_DIMENSION.call(mainTable, columnName, numberPartitions, chunkTimeInterval, partitioningFunc, ifNotExists)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static AddDimension addDimension(Object mainTable, String columnName, Integer numberPartitions, Object chunkTimeInterval, String partitioningFunc, Boolean ifNotExists) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.AddDimension.ADD_DIMENSION.call(mainTable, columnName, numberPartitions, chunkTimeInterval, partitioningFunc, ifNotExists);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static AddDimension addDimension(Field<Object> mainTable, Field<String> columnName, Field<Integer> numberPartitions, Field<Object> chunkTimeInterval, Field<String> partitioningFunc, Field<Boolean> ifNotExists) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.AddDimension.ADD_DIMENSION.call(mainTable, columnName, numberPartitions, chunkTimeInterval, partitioningFunc, ifNotExists);
    }

    /**
     * Call <code>public.alter_job_schedule</code>.
     */
    public static Result<Record> alterJobSchedule(Configuration configuration, Integer jobId, YearToSecond scheduleInterval, YearToSecond maxRuntime, Integer maxRetries, YearToSecond retryPeriod, Boolean ifExists, OffsetDateTime nextStart) {
        return configuration.dsl().selectFrom(com.hedera.hashgraph.stablecoin.platform.db.tables.AlterJobSchedule.ALTER_JOB_SCHEDULE.call(jobId, scheduleInterval, maxRuntime, maxRetries, retryPeriod, ifExists, nextStart)).fetch();
    }

    /**
     * Get <code>public.alter_job_schedule</code> as a table.
     */
    public static AlterJobSchedule alterJobSchedule(Integer jobId, YearToSecond scheduleInterval, YearToSecond maxRuntime, Integer maxRetries, YearToSecond retryPeriod, Boolean ifExists, OffsetDateTime nextStart) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.AlterJobSchedule.ALTER_JOB_SCHEDULE.call(jobId, scheduleInterval, maxRuntime, maxRetries, retryPeriod, ifExists, nextStart);
    }

    /**
     * Get <code>public.alter_job_schedule</code> as a table.
     */
    public static AlterJobSchedule alterJobSchedule(Field<Integer> jobId, Field<YearToSecond> scheduleInterval, Field<YearToSecond> maxRuntime, Field<Integer> maxRetries, Field<YearToSecond> retryPeriod, Field<Boolean> ifExists, Field<OffsetDateTime> nextStart) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.AlterJobSchedule.ALTER_JOB_SCHEDULE.call(jobId, scheduleInterval, maxRuntime, maxRetries, retryPeriod, ifExists, nextStart);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<Record> chunkRelationSize(Configuration configuration, Object mainTable) {
        return configuration.dsl().selectFrom(com.hedera.hashgraph.stablecoin.platform.db.tables.ChunkRelationSize.CHUNK_RELATION_SIZE.call(mainTable)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static ChunkRelationSize chunkRelationSize(Object mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.ChunkRelationSize.CHUNK_RELATION_SIZE.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static ChunkRelationSize chunkRelationSize(Field<Object> mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.ChunkRelationSize.CHUNK_RELATION_SIZE.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<Record> chunkRelationSizePretty(Configuration configuration, Object mainTable) {
        return configuration.dsl().selectFrom(com.hedera.hashgraph.stablecoin.platform.db.tables.ChunkRelationSizePretty.CHUNK_RELATION_SIZE_PRETTY.call(mainTable)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static ChunkRelationSizePretty chunkRelationSizePretty(Object mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.ChunkRelationSizePretty.CHUNK_RELATION_SIZE_PRETTY.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static ChunkRelationSizePretty chunkRelationSizePretty(Field<Object> mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.ChunkRelationSizePretty.CHUNK_RELATION_SIZE_PRETTY.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<Record> createHypertable(Configuration configuration, Object mainTable, String timeColumnName, String partitioningColumn, Integer numberPartitions, String associatedSchemaName, String associatedTablePrefix, Object chunkTimeInterval, Boolean createDefaultIndexes, Boolean ifNotExists, String partitioningFunc, Boolean migrateData, String chunkTargetSize, String chunkSizingFunc, String timePartitioningFunc) {
        return configuration.dsl().selectFrom(com.hedera.hashgraph.stablecoin.platform.db.tables.CreateHypertable.CREATE_HYPERTABLE.call(mainTable, timeColumnName, partitioningColumn, numberPartitions, associatedSchemaName, associatedTablePrefix, chunkTimeInterval, createDefaultIndexes, ifNotExists, partitioningFunc, migrateData, chunkTargetSize, chunkSizingFunc, timePartitioningFunc)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static CreateHypertable createHypertable(Object mainTable, String timeColumnName, String partitioningColumn, Integer numberPartitions, String associatedSchemaName, String associatedTablePrefix, Object chunkTimeInterval, Boolean createDefaultIndexes, Boolean ifNotExists, String partitioningFunc, Boolean migrateData, String chunkTargetSize, String chunkSizingFunc, String timePartitioningFunc) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.CreateHypertable.CREATE_HYPERTABLE.call(mainTable, timeColumnName, partitioningColumn, numberPartitions, associatedSchemaName, associatedTablePrefix, chunkTimeInterval, createDefaultIndexes, ifNotExists, partitioningFunc, migrateData, chunkTargetSize, chunkSizingFunc, timePartitioningFunc);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static CreateHypertable createHypertable(Field<Object> mainTable, Field<String> timeColumnName, Field<String> partitioningColumn, Field<Integer> numberPartitions, Field<String> associatedSchemaName, Field<String> associatedTablePrefix, Field<Object> chunkTimeInterval, Field<Boolean> createDefaultIndexes, Field<Boolean> ifNotExists, Field<String> partitioningFunc, Field<Boolean> migrateData, Field<String> chunkTargetSize, Field<String> chunkSizingFunc, Field<String> timePartitioningFunc) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.CreateHypertable.CREATE_HYPERTABLE.call(mainTable, timeColumnName, partitioningColumn, numberPartitions, associatedSchemaName, associatedTablePrefix, chunkTimeInterval, createDefaultIndexes, ifNotExists, partitioningFunc, migrateData, chunkTargetSize, chunkSizingFunc, timePartitioningFunc);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<Record> dropChunks(Configuration configuration, Object olderThan, String tableName, String schemaName, Boolean cascade, Object newerThan, Boolean verbose, Boolean cascadeToMaterializations) {
        return configuration.dsl().selectFrom(com.hedera.hashgraph.stablecoin.platform.db.tables.DropChunks.DROP_CHUNKS.call(olderThan, tableName, schemaName, cascade, newerThan, verbose, cascadeToMaterializations)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static DropChunks dropChunks(Object olderThan, String tableName, String schemaName, Boolean cascade, Object newerThan, Boolean verbose, Boolean cascadeToMaterializations) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.DropChunks.DROP_CHUNKS.call(olderThan, tableName, schemaName, cascade, newerThan, verbose, cascadeToMaterializations);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static DropChunks dropChunks(Field<Object> olderThan, Field<String> tableName, Field<String> schemaName, Field<Boolean> cascade, Field<Object> newerThan, Field<Boolean> verbose, Field<Boolean> cascadeToMaterializations) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.DropChunks.DROP_CHUNKS.call(olderThan, tableName, schemaName, cascade, newerThan, verbose, cascadeToMaterializations);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<Record> hypertableApproximateRowCount(Configuration configuration, Object mainTable) {
        return configuration.dsl().selectFrom(com.hedera.hashgraph.stablecoin.platform.db.tables.HypertableApproximateRowCount.HYPERTABLE_APPROXIMATE_ROW_COUNT.call(mainTable)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static HypertableApproximateRowCount hypertableApproximateRowCount(Object mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.HypertableApproximateRowCount.HYPERTABLE_APPROXIMATE_ROW_COUNT.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static HypertableApproximateRowCount hypertableApproximateRowCount(Field<Object> mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.HypertableApproximateRowCount.HYPERTABLE_APPROXIMATE_ROW_COUNT.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<Record> hypertableRelationSize(Configuration configuration, Object mainTable) {
        return configuration.dsl().selectFrom(com.hedera.hashgraph.stablecoin.platform.db.tables.HypertableRelationSize.HYPERTABLE_RELATION_SIZE.call(mainTable)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static HypertableRelationSize hypertableRelationSize(Object mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.HypertableRelationSize.HYPERTABLE_RELATION_SIZE.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static HypertableRelationSize hypertableRelationSize(Field<Object> mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.HypertableRelationSize.HYPERTABLE_RELATION_SIZE.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<Record> hypertableRelationSizePretty(Configuration configuration, Object mainTable) {
        return configuration.dsl().selectFrom(com.hedera.hashgraph.stablecoin.platform.db.tables.HypertableRelationSizePretty.HYPERTABLE_RELATION_SIZE_PRETTY.call(mainTable)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static HypertableRelationSizePretty hypertableRelationSizePretty(Object mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.HypertableRelationSizePretty.HYPERTABLE_RELATION_SIZE_PRETTY.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static HypertableRelationSizePretty hypertableRelationSizePretty(Field<Object> mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.HypertableRelationSizePretty.HYPERTABLE_RELATION_SIZE_PRETTY.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<Record> indexesRelationSize(Configuration configuration, Object mainTable) {
        return configuration.dsl().selectFrom(com.hedera.hashgraph.stablecoin.platform.db.tables.IndexesRelationSize.INDEXES_RELATION_SIZE.call(mainTable)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static IndexesRelationSize indexesRelationSize(Object mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.IndexesRelationSize.INDEXES_RELATION_SIZE.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static IndexesRelationSize indexesRelationSize(Field<Object> mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.IndexesRelationSize.INDEXES_RELATION_SIZE.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<Record> indexesRelationSizePretty(Configuration configuration, Object mainTable) {
        return configuration.dsl().selectFrom(com.hedera.hashgraph.stablecoin.platform.db.tables.IndexesRelationSizePretty.INDEXES_RELATION_SIZE_PRETTY.call(mainTable)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static IndexesRelationSizePretty indexesRelationSizePretty(Object mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.IndexesRelationSizePretty.INDEXES_RELATION_SIZE_PRETTY.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static IndexesRelationSizePretty indexesRelationSizePretty(Field<Object> mainTable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.IndexesRelationSizePretty.INDEXES_RELATION_SIZE_PRETTY.call(mainTable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<Record> showChunks(Configuration configuration, Object hypertable, Object olderThan, Object newerThan) {
        return configuration.dsl().selectFrom(com.hedera.hashgraph.stablecoin.platform.db.tables.ShowChunks.SHOW_CHUNKS.call(hypertable, olderThan, newerThan)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static ShowChunks showChunks(Object hypertable, Object olderThan, Object newerThan) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.ShowChunks.SHOW_CHUNKS.call(hypertable, olderThan, newerThan);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static ShowChunks showChunks(Field<Object> hypertable, Field<Object> olderThan, Field<Object> newerThan) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.ShowChunks.SHOW_CHUNKS.call(hypertable, olderThan, newerThan);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<Record> showTablespaces(Configuration configuration, Object hypertable) {
        return configuration.dsl().selectFrom(com.hedera.hashgraph.stablecoin.platform.db.tables.ShowTablespaces.SHOW_TABLESPACES.call(hypertable)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static ShowTablespaces showTablespaces(Object hypertable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.ShowTablespaces.SHOW_TABLESPACES.call(hypertable);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static ShowTablespaces showTablespaces(Field<Object> hypertable) {
        return com.hedera.hashgraph.stablecoin.platform.db.tables.ShowTablespaces.SHOW_TABLESPACES.call(hypertable);
    }
}
