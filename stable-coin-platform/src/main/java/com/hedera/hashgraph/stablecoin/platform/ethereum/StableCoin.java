package com.hedera.hashgraph.stablecoin.platform.ethereum;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.4.
 */
@SuppressWarnings("rawtypes")
public class StableCoin extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b506040516200560c3803806200560c833981810160405260e08110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a0909401516000805460ff191681559396509194509291879087908790620001e26001600160e01b03620005b716565b600080546001600160a01b0383166101008102610100600160a81b03199092169190911790915560408051918252519192507f85a8c8100c1d48466310240af79644f50cdae7d09cb4820d60dfc5b2462f0fd0919081900360200190a15082516200025590603790602086019062001016565b5081516200026b90603890602085019062001016565b506039805460ff90921660ff199092169190911790555050603b80546001600160a01b038086166001600160a01b031992831617909255603c8054858416908316179055603d805492841692909116919091179055620002e86000620002d96001600160e01b03620005b716565b6001600160e01b03620005bc16565b620002fe6000836001600160e01b03620005d516565b604080517f4b59435f504153534544000000000000000000000000000000000000000000008152905190819003600a0190206200035790620003486001600160e01b03620005b716565b6001600160e01b03620005d516565b604080517f4b59435f504153534544000000000000000000000000000000000000000000008152905190819003600a0190206200039e90846001600160e01b03620005d516565b604080517f4b59435f504153534544000000000000000000000000000000000000000000008152905190819003600a019020620003e590836001600160e01b03620005d516565b604080517f4b59435f504153534544000000000000000000000000000000000000000000008152905190819003600a0190206200042c90826001600160e01b03620005d516565b62000440846001600160e01b036200066516565b7f8e2f85526a0e08976b7ce2ee9788ecc5019d6e5fcb3a524b69ab82531cccaf9d878787878787876040518080602001806020018860ff1660ff168152602001878152602001866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183810383528a818151815260200191508051906020019080838360005b8381101562000505578181015183820152602001620004eb565b50505050905090810190601f168015620005335780820380516001836020036101000a031916815260200191505b5083810382528951815289516020918201918b019080838360005b83811015620005685781810151838201526020016200054e565b50505050905090810190601f168015620005965780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a150505050505050620010b8565b335b90565b620005d182826001600160e01b03620007b516565b5050565b6000828152603360205260409020600201546200060e90620005ff6001600160e01b03620005b716565b6001600160e01b03620007e116565b620005bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180620054fd602f913960400191505060405180910390fd5b620006786001600160e01b036200081016565b6001600160a01b0316620006946001600160e01b03620005b716565b6001600160a01b03161480620006df5750620006b86001600160e01b036200081f16565b6001600160a01b0316620006d46001600160e01b03620005b716565b6001600160a01b0316145b62000736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806200555f602f913960400191505060405180910390fd5b6200075d6200074d6001600160e01b036200081016565b826001600160e01b036200083316565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885620007916001600160e01b03620005b716565b604080516001600160a01b039092168252602082018490528051918290030190a150565b6000828152603360209081526040909120620007dc91839062002e9762000931821b17901c565b505050565b600082815260336020908152604082206200080791849062002eb362000951821b17901c565b90505b92915050565b603b546001600160a01b031690565b60005461010090046001600160a01b031690565b6001600160a01b038216620008a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b620008c0600083836001600160e01b036200097116565b620008dc8160365462000e8260201b62002ec81790919060201c565b6036556001600160a01b0382166000908152603460209081526040909120546200091191839062002ec862000e82821b17901c565b6001600160a01b0390921660009081526034602052604090209190915550565b600062000807836001600160a01b0384166001600160e01b0362000ef716565b600062000807836001600160a01b0384166001600160e01b0362000f4f16565b604080517f4b59435f504153534544000000000000000000000000000000000000000000008152905190819003600a019020620009bb90620005ff6001600160e01b03620005b716565b62000a12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180620055b6602c913960400191505060405180910390fd5b604080517f46524f5a454e00000000000000000000000000000000000000000000000000008152905190819003600601902062000a5c90620005ff6001600160e01b03620005b716565b1562000ab4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001806200552c6033913960400191505060405180910390fd5b60005460ff161562000b2757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b62000b3a6001600160e01b036200081016565b6001600160a01b0316836001600160a01b031614801562000b6257506001600160a01b038216155b1562000b865762000b80838383620007dc60201b62002f221760201c565b620007dc565b62000b996001600160e01b036200081016565b6001600160a01b0316826001600160a01b031614801562000bc157506001600160a01b038316155b1562000bdf5762000b80838383620007dc60201b62002f221760201c565b62000bf26001600160e01b036200081016565b6001600160a01b0316826001600160a01b031614801562000c555750604080517f46524f5a454e00000000000000000000000000000000000000000000000000008152905190819003600601902062000c5590846001600160e01b03620007e116565b801562000c74575062000c71836001600160e01b0362000f6716565b81145b1562000c925762000b80838383620007dc60201b62002f221760201c565b62000ca6836001600160e01b0362000f8216565b62000cfd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806200558e6028913960400191505060405180910390fd5b62000d11826001600160e01b0362000f8216565b62000d68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180620055e2602a913960400191505060405180910390fd5b62000d7c836001600160e01b0362000fcc16565b1562000de957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f53656e646572206163636f756e742069732066726f7a656e2e00000000000000604482015290519081900360640190fd5b62000dfd826001600160e01b0362000fcc16565b1562000e6a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5265636569766572206163636f756e742069732066726f7a656e2e0000000000604482015290519081900360640190fd5b620007dc838383620007dc60201b62002f221760201c565b6000828201838110156200080757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600062000f0e83836001600160e01b0362000f4f16565b62000f46575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200080a565b5060006200080a565b60009081526001919091016020526040902054151590565b6001600160a01b031660009081526034602052604090205490565b604080517f4b59435f504153534544000000000000000000000000000000000000000000008152905190819003600a0190206000906200080a90836001600160e01b03620007e116565b604080517f46524f5a454e0000000000000000000000000000000000000000000000000000815290519081900360060190206000906200080a90836001600160e01b03620007e116565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200105957805160ff191683800117855562001089565b8280016001018555821562001089579182015b82811115620010895782518255916020019190600101906200106c565b50620010979291506200109b565b5090565b620005b991905b80821115620010975760008155600101620010a2565b61443580620010c86000396000f3fe608060405234801561001057600080fd5b50600436106102c85760003560e01c80638456cb591161017b578063b5ed298a116100d8578063e58398361161008c578063ec1774a211610071578063ec1774a214610c24578063f147389f14610c4a578063ff7bce2314610c52576102c8565b8063e583983614610bd8578063e8573eb914610bfe576102c8565b8063dbe72a39116100bd578063dbe72a3914610b5e578063dd62ed3e14610b84578063dfd7828914610bb2576102c8565b8063b5ed298a14610b30578063d153b60c14610b56576102c8565b8063a0712d681161012f578063a457c2d711610114578063a457c2d714610ab2578063a9059cbb14610ade578063b08ab24514610b0a576102c8565b8063a0712d6814610a8d578063a217fddf14610aaa576102c8565b80638d1fdf2f116101605780638d1fdf2f14610a575780638da5cb5b14610a7d57806395d89b4114610a85576102c8565b80638456cb5914610a2b578063879d3c0314610a33576102c8565b8063410937a5116102295780635c975abb116101dd57806370a08231116101c257806370a08231146108a05780637369eef9146108c657806383d3a080146108ec576102c8565b80635c975abb1461085e5780636db0b98e1461087a576102c8565b806345c8b1a61161020e57806345c8b1a61461070157806346a8cd5c146107275780634e71e0c814610856576102c8565b8063410937a5146106b857806342966c68146106e4576102c8565b80632159abf411610280578063313ce56711610265578063313ce5671461066657806339509351146106845780633f4ba83a146106b0576102c8565b80632159abf41461060a57806323b872dd14610630576102c8565b8063152b8241116102b1578063152b82411461037857806318160ddd146104b357806318994a53146104cd576102c8565b806306fdde03146102cd5780630a1553a51461034a575b600080fd5b6102d5610c5a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561030f5781810151838201526020016102f7565b50505050905090810190601f16801561033c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103766004803603604081101561036057600080fd5b506001600160a01b038135169060200135610cf0565b005b6103766004803603608081101561038e57600080fd5b8101906020810181356401000000008111156103a957600080fd5b8201836020820111156103bb57600080fd5b803590602001918460018302840111640100000000831117156103dd57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561043057600080fd5b82018360208201111561044257600080fd5b8035906020019184600183028401116401000000008311171561046457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b038335169350505060200135610e26565b6104bb6110ed565b60408051918252519081900360200190f35b6104bb600480360360608110156104e357600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561050e57600080fd5b82018360208201111561052057600080fd5b8035906020019184600183028401116401000000008311171561054257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561059557600080fd5b8201836020820111156105a757600080fd5b803590602001918460018302840111640100000000831117156105c957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506110f3945050505050565b6103766004803603602081101561062057600080fd5b50356001600160a01b03166111d0565b6103766004803603606081101561064657600080fd5b506001600160a01b0381358116916020810135909116906040013561134a565b61066e6114d1565b6040805160ff9092168252519081900360200190f35b6103766004803603604081101561069a57600080fd5b506001600160a01b0381351690602001356114da565b610376611631565b610376600480360360408110156106ce57600080fd5b506001600160a01b038135169060200135611707565b610376600480360360208110156106fa57600080fd5b5035611852565b6103766004803603602081101561071757600080fd5b50356001600160a01b031661193d565b6103766004803603606081101561073d57600080fd5b81019060208101813564010000000081111561075857600080fd5b82018360208201111561076a57600080fd5b8035906020019184600183028401116401000000008311171561078c57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156107df57600080fd5b8201836020820111156107f157600080fd5b8035906020019184600183028401116401000000008311171561081357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250611a29915050565b610376611cc4565b610866611dcb565b604080519115158252519081900360200190f35b6103766004803603602081101561089057600080fd5b50356001600160a01b0316611dd4565b6104bb600480360360208110156108b657600080fd5b50356001600160a01b0316611f72565b610376600480360360208110156108dc57600080fd5b50356001600160a01b0316611f8d565b6103766004803603608081101561090257600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561092d57600080fd5b82018360208201111561093f57600080fd5b8035906020019184600183028401116401000000008311171561096157600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156109b457600080fd5b8201836020820111156109c657600080fd5b803590602001918460018302840111640100000000831117156109e857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550509135925061212b915050565b610376612473565b610a3b61252c565b604080516001600160a01b039092168252519081900360200190f35b61037660048036036020811015610a6d57600080fd5b50356001600160a01b031661253b565b610a3b6126c7565b6102d56126db565b61037660048036036020811015610aa357600080fd5b503561273c565b6104bb6127fe565b61037660048036036040811015610ac857600080fd5b506001600160a01b038135169060200135612803565b61037660048036036040811015610af457600080fd5b506001600160a01b03813516906020013561295c565b61086660048036036020811015610b2057600080fd5b50356001600160a01b0316612997565b61037660048036036020811015610b4657600080fd5b50356001600160a01b03166129c9565b610a3b612ada565b61037660048036036020811015610b7457600080fd5b50356001600160a01b0316612ae9565b6104bb60048036036040811015610b9a57600080fd5b506001600160a01b0381358116916020013516612c87565b61037660048036036020811015610bc857600080fd5b50356001600160a01b0316612cb2565b61086660048036036020811015610bee57600080fd5b50356001600160a01b0316612da2565b61086660048036036020811015610c1457600080fd5b50356001600160a01b0316612dca565b61086660048036036020811015610c3a57600080fd5b50356001600160a01b0316612e57565b610a3b612e79565b610a3b612e88565b60378054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610ce65780601f10610cbb57610100808354040283529160200191610ce6565b820191906000526020600020905b815481529060010190602001808311610cc957829003601f168201915b5050505050905090565b604080516912d650d7d41054d4d15160b21b8152905190819003600a019020610d2090610d1b612f27565b612f2b565b610d5b5760405162461bcd60e51b815260040180806020018281038252602c81526020018061417c602c913960400191505060405180910390fd5b6040805165232927ad22a760d11b81529051908190036006019020610d8290610d1b612f27565b15610dbe5760405162461bcd60e51b8152600401808060200182810382526033815260200180613fe26033913960400191505060405180910390fd5b610dd0610dc9612f27565b8383612f49565b7f6e11fb1b7f119e3f2fa29896ef5fdf8b8a2d0d4df6fe90ba8668e7d8b2ffa25e610df9612f27565b604080516001600160a01b0392831681529185166020830152818101849052519081900360600190a15050565b610e2e612e79565b6001600160a01b0316610e3f612f27565b6001600160a01b03161480610e735750610e576126c7565b6001600160a01b0316610e68612f27565b6001600160a01b0316145b610eae5760405162461bcd60e51b815260040180806020018281038252602f81526020018061405d602f913960400191505060405180910390fd5b60005460ff1615610ef9576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b610f0282612997565b610f3d5760405162461bcd60e51b815260040180806020018281038252602b8152602001806141a8602b913960400191505060405180910390fd5b610f4682612da2565b15610f98576040805162461bcd60e51b815260206004820152601c60248201527f526563697069656e74206163636f756e742069732066726f7a656e2e00000000604482015290519081900360640190fd5b603b54610fae906001600160a01b03168261300a565b603b54610fc5906001600160a01b031683836130d0565b7f1b8f7c4d3ae072e0afc970fed04859899329875fa9715fa37e7da1d9a44f425184848484604051808060200180602001856001600160a01b03166001600160a01b03168152602001848152602001838103835287818151815260200191508051906020019080838360005b83811015611049578181015183820152602001611031565b50505050905090810190601f1680156110765780820380516001836020036101000a031916815260200191505b50838103825286518152865160209182019188019080838360005b838110156110a9578181015183820152602001611091565b50505050905090810190601f1680156110d65780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a150505050565b60365490565b6001600160a01b0383166000908152603a60209081526040808320905185519192869282918401908083835b6020831061113e5780518252601f19909201916020918201910161111f565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842086519094879450925082918401908083835b6020831061119a5780518252601f19909201916020918201910161117b565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220549695505050505050565b6111d8612e88565b6001600160a01b03166111e9612f27565b6001600160a01b0316148061121d57506112016126c7565b6001600160a01b0316611212612f27565b6001600160a01b0316145b6112585760405162461bcd60e51b81526004018080602001828103825260338152602001806143a36033913960400191505060405180910390fd5b61126181612dca565b1561129d5760405162461bcd60e51b815260040180806020018281038252602b815260200180614220602b913960400191505060405180910390fd5b6001600160a01b0381166112e25760405162461bcd60e51b81526004018080602001828103825260218152602001806140dd6021913960400191505060405180910390fd5b604080516912d650d7d41054d4d15160b21b8152905190819003600a01902061130b90826131fe565b604080516001600160a01b038316815290517f8fa3f537534eaa8a497b35f7bd10c9a9e321c8458256eb5048dd35dac0552bb79181900360200190a150565b604080516912d650d7d41054d4d15160b21b8152905190819003600a01902061137590610d1b612f27565b6113b05760405162461bcd60e51b815260040180806020018281038252602c81526020018061417c602c913960400191505060405180910390fd5b6040805165232927ad22a760d11b815290519081900360060190206113d790610d1b612f27565b156114135760405162461bcd60e51b8152600401808060200182810382526033815260200180613fe26033913960400191505060405180910390fd5b61141e838383613265565b604080516001600160a01b0380861682528416602082015280820183905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a17f6e11fb1b7f119e3f2fa29896ef5fdf8b8a2d0d4df6fe90ba8668e7d8b2ffa25e83611492612f27565b6114a38661149e612f27565b612c87565b604080516001600160a01b0394851681529290931660208301528183015290519081900360600190a1505050565b60395460ff1690565b604080516912d650d7d41054d4d15160b21b8152905190819003600a01902061150590610d1b612f27565b6115405760405162461bcd60e51b815260040180806020018281038252602c81526020018061417c602c913960400191505060405180910390fd5b6040805165232927ad22a760d11b8152905190819003600601902061156790610d1b612f27565b156115a35760405162461bcd60e51b8152600401808060200182810382526033815260200180613fe26033913960400191505060405180910390fd5b60006115c6826115ba6115b4612f27565b86612c87565b9063ffffffff612ec816565b90506115da6115d3612f27565b8483612f49565b7f01722f0e92ffd761d4a842cffdd36fe3adb6091e41732a4e714250176b7d8d22611603612f27565b604080516001600160a01b0392831681529186166020830152818101849052519081900360600190a1505050565b611639612e88565b6001600160a01b031661164a612f27565b6001600160a01b0316148061167e57506116626126c7565b6001600160a01b0316611673612f27565b6001600160a01b0316145b6116b95760405162461bcd60e51b81526004018080602001828103825260338152602001806143a36033913960400191505060405180910390fd5b6116c16132e6565b7faeb196d352664784d1900b0e7414a8face7d29f4dae8c4b0cf68ed477423bbf46116ea612f27565b604080516001600160a01b039092168252519081900360200190a1565b61170f61252c565b6001600160a01b0316611720612f27565b6001600160a01b0316148061175457506117386126c7565b6001600160a01b0316611749612f27565b6001600160a01b0316145b61178f5760405162461bcd60e51b815260040180806020018281038252603481526020018061424b6034913960400191505060405180910390fd5b600061179a83611f72565b9050808211156117db5760405162461bcd60e51b81526004018080602001828103825260258152602001806141d36025913960400191505060405180910390fd5b603b546117f39084906001600160a01b0316846130d0565b603b54611809906001600160a01b031683613349565b604080516001600160a01b03851681526020810184905281517f2d2c7da251295f4d722a8ddaf337627952c957ce21b2757c852e47fe81b3a2af929181900390910190a1505050565b61185a612e79565b6001600160a01b031661186b612f27565b6001600160a01b0316148061189f57506118836126c7565b6001600160a01b0316611894612f27565b6001600160a01b0316145b6118da5760405162461bcd60e51b815260040180806020018281038252602f81526020018061405d602f913960400191505060405180910390fd5b603b546118f0906001600160a01b031682613349565b7fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5611919612f27565b604080516001600160a01b039092168252602082018490528051918290030190a150565b611945612e88565b6001600160a01b0316611956612f27565b6001600160a01b0316148061198a575061196e6126c7565b6001600160a01b031661197f612f27565b6001600160a01b0316145b6119c55760405162461bcd60e51b81526004018080602001828103825260338152602001806143a36033913960400191505060405180910390fd5b6040805165232927ad22a760d11b815290519081900360060190206119ea90826131fe565b604080516001600160a01b038316815290517fca5069937e68fd197927055037f59d7c90bf75ac104e6e375539ef480c3ad6ee9181900360200190a150565b604080516912d650d7d41054d4d15160b21b8152905190819003600a019020611a5490610d1b612f27565b611a8f5760405162461bcd60e51b815260040180806020018281038252602c81526020018061417c602c913960400191505060405180910390fd5b6040805165232927ad22a760d11b81529051908190036006019020611ab690610d1b612f27565b15611af25760405162461bcd60e51b8152600401808060200182810382526033815260200180613fe26033913960400191505060405180910390fd5b60005460ff1615611b3d576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b611b4d611b48612f27565b611f72565b811115611b8b5760405162461bcd60e51b815260040180806020018281038252602181526020018061433a6021913960400191505060405180910390fd5b611b96838383613410565b7f6525d8dcd7ef00ad95bfa7dedfbc7fee25fd22d209edbda6370ec3d4d2f8f49c611bbf612f27565b84848460405180856001600160a01b03166001600160a01b031681526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015611c21578181015183820152602001611c09565b50505050905090810190601f168015611c4e5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015611c81578181015183820152602001611c69565b50505050905090810190601f168015611cae5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1505050565b6001546001600160a01b0316611cd8612f27565b6001600160a01b031614611d1d5760405162461bcd60e51b815260040180806020018281038252602f8152602001806140ae602f913960400191505060405180910390fd5b6000611d276126c7565b9050611d31613423565b611d436000611d3e612f27565b613516565b604080516912d650d7d41054d4d15160b21b8152905190819003600a019020611d7390611d6e612f27565b613520565b6040805165232927ad22a760d11b81529051908190036006019020611d9f90611d9a612f27565b6131fe565b604080516912d650d7d41054d4d15160b21b8152905190819003600a019020611dc890826131fe565b50565b60005460ff1690565b611ddc612f27565b60005461010090046001600160a01b03908116911614611e2d5760405162461bcd60e51b81526004018080602001828103825260268152602001806140376026913960400191505060405180910390fd5b6001600160a01b038116611e725760405162461bcd60e51b815260040180806020018281038252602481526020018061427f6024913960400191505060405180910390fd5b604080516912d650d7d41054d4d15160b21b8152905190819003600a019020603b54611ea791906001600160a01b03166131fe565b603b80546001600160a01b0380841673ffffffffffffffffffffffffffffffffffffffff199092169190911791829055604080516912d650d7d41054d4d15160b21b8152905190819003600a019020611f0292909116613520565b6040805165232927ad22a760d11b81529051908190036006019020603b54611f3391906001600160a01b03166131fe565b604080516001600160a01b038316815290517f7a696d744bfa024b93ab3465555620d92fb3b6e9b3f31f73e5cb1b7fdffb297a9181900360200190a150565b6001600160a01b031660009081526034602052604090205490565b611f95612f27565b60005461010090046001600160a01b03908116911614611fe65760405162461bcd60e51b81526004018080602001828103825260268152602001806140376026913960400191505060405180910390fd5b6001600160a01b03811661202b5760405162461bcd60e51b81526004018080602001828103825260288152602001806143126028913960400191505060405180910390fd5b604080516912d650d7d41054d4d15160b21b8152905190819003600a019020603d5461206091906001600160a01b03166131fe565b603d80546001600160a01b0380841673ffffffffffffffffffffffffffffffffffffffff199092169190911791829055604080516912d650d7d41054d4d15160b21b8152905190819003600a0190206120bb92909116613520565b6040805165232927ad22a760d11b81529051908190036006019020603d546120ec91906001600160a01b03166131fe565b604080516001600160a01b038316815290517f140f3788a1891d7b9320b7e2925a1f7ad31a9964f5886de7a7ab16c73e52066e9181900360200190a150565b612133612e79565b6001600160a01b0316612144612f27565b6001600160a01b03161480612178575061215c6126c7565b6001600160a01b031661216d612f27565b6001600160a01b0316145b6121b35760405162461bcd60e51b815260040180806020018281038252602f81526020018061405d602f913960400191505060405180910390fd5b60005460ff16156121fe576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b61220784612997565b6122425760405162461bcd60e51b81526004018080602001828103825260298152602001806142c46029913960400191505060405180910390fd5b61224b84612da2565b1561229d576040805162461bcd60e51b815260206004820152601a60248201527f5370656e646572206163636f756e742069732066726f7a656e2e000000000000604482015290519081900360640190fd5b60006122aa8585856110f3565b905080821115612301576040805162461bcd60e51b815260206004820152601e60248201527f416d6f756e742067726561746572207468616e20616c6c6f77616e63652e0000604482015290519081900360640190fd5b603b546123199086906001600160a01b0316846130d0565b603b5461232f906001600160a01b031683613349565b61234a858585612345858763ffffffff61357916565b6135bb565b7f82b004d4752d135ee5f09b127d2f5718853792c19e37a22f66bd8f343e0c9cbc8585858560405180856001600160a01b03166001600160a01b031681526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156123ce5781810151838201526020016123b6565b50505050905090810190601f1680156123fb5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561242e578181015183820152602001612416565b50505050905090810190601f16801561245b5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a15050505050565b61247b612e88565b6001600160a01b031661248c612f27565b6001600160a01b031614806124c057506124a46126c7565b6001600160a01b03166124b5612f27565b6001600160a01b0316145b6124fb5760405162461bcd60e51b81526004018080602001828103825260338152602001806143a36033913960400191505060405180910390fd5b612503613765565b7f5ee71a369c8672edded508e624ffc9257fa1ae6886ef32905c18e60196bca3996116ea612f27565b603d546001600160a01b031690565b612543612e88565b6001600160a01b0316612554612f27565b6001600160a01b03161480612588575061256c6126c7565b6001600160a01b031661257d612f27565b6001600160a01b0316145b6125c35760405162461bcd60e51b81526004018080602001828103825260338152602001806143a36033913960400191505060405180910390fd5b6125cc81612dca565b156126085760405162461bcd60e51b815260040180806020018281038252602481526020018061437f6024913960400191505060405180910390fd5b6001600160a01b038116612663576040805162461bcd60e51b815260206004820152601a60248201527f43616e6e6f7420667265657a652061646472657373203078302e000000000000604482015290519081900360640190fd5b6040805165232927ad22a760d11b815290519081900360060190206126889082613520565b604080516001600160a01b038316815290517faf85b60d26151edd11443b704d424da6c43d0468f2235ebae3d1904dbc3230499181900360200190a150565b60005461010090046001600160a01b031690565b60388054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610ce65780601f10610cbb57610100808354040283529160200191610ce6565b612744612e79565b6001600160a01b0316612755612f27565b6001600160a01b03161480612789575061276d6126c7565b6001600160a01b031661277e612f27565b6001600160a01b0316145b6127c45760405162461bcd60e51b815260040180806020018281038252602f81526020018061405d602f913960400191505060405180910390fd5b6127d56127cf612e79565b8261300a565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885611919612f27565b600081565b604080516912d650d7d41054d4d15160b21b8152905190819003600a01902061282e90610d1b612f27565b6128695760405162461bcd60e51b815260040180806020018281038252602c81526020018061417c602c913960400191505060405180910390fd5b6040805165232927ad22a760d11b8152905190819003600601902061289090610d1b612f27565b156128cc5760405162461bcd60e51b8152600401808060200182810382526033815260200180613fe26033913960400191505060405180910390fd5b6000612926826040518060400160405280601e81526020017f416d6f756e742067726561746572207468616e20616c6c6f77616e63652e0000815250612919612913612f27565b87612c87565b919063ffffffff6137bf16565b90506129336115d3612f27565b7f3fda289a93fbd447987ffc8940a1af71a1fad600cc184d06b56d4aa271393522611603612f27565b61296e612967612f27565b83836130d0565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610df9612f27565b604080516912d650d7d41054d4d15160b21b8152905190819003600a0190206000906129c39083612f2b565b92915050565b6129d1612f27565b60005461010090046001600160a01b03908116911614612a225760405162461bcd60e51b81526004018080602001828103825260268152602001806140376026913960400191505060405180910390fd5b6001600160a01b038116612a7d576040805162461bcd60e51b815260206004820181905260248201527f43616e6e6f742070726f706f736520307830206173206e6577206f776e65722e604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691909117918290556040519116907f4eca5d040b0eaa90931278735a7753956bd8f0424eb2b74279747c62fa7e55c190600090a250565b6001546001600160a01b031690565b612af1612f27565b60005461010090046001600160a01b03908116911614612b425760405162461bcd60e51b81526004018080602001828103825260268152602001806140376026913960400191505060405180910390fd5b6001600160a01b038116612b875760405162461bcd60e51b8152600401808060200182810382526028815260200180613f8b6028913960400191505060405180910390fd5b604080516912d650d7d41054d4d15160b21b8152905190819003600a019020603c54612bbc91906001600160a01b03166131fe565b603c80546001600160a01b0380841673ffffffffffffffffffffffffffffffffffffffff199092169190911791829055604080516912d650d7d41054d4d15160b21b8152905190819003600a019020612c1792909116613520565b6040805165232927ad22a760d11b81529051908190036006019020603c54612c4891906001600160a01b03166131fe565b604080516001600160a01b038316815290517f2464dc2a9210ca3b1840dbcd271988b049c111f76b296cbee79f112ad6c2135e9181900360200190a150565b6001600160a01b03918216600090815260356020908152604080832093909416825291909152205490565b612cba612e88565b6001600160a01b0316612ccb612f27565b6001600160a01b03161480612cff5750612ce36126c7565b6001600160a01b0316612cf4612f27565b6001600160a01b0316145b612d3a5760405162461bcd60e51b81526004018080602001828103825260338152602001806143a36033913960400191505060405180910390fd5b604080516912d650d7d41054d4d15160b21b8152905190819003600a019020612d639082613520565b604080516001600160a01b038316815290517f0b5df97b96526072100a8af6f1337a7297ec9cdbc3e898e6c808609c815b03ec9181900360200190a150565b6040805165232927ad22a760d11b815290519081900360060190206000906129c39083612f2b565b6000612dd4612e79565b6001600160a01b0316826001600160a01b03161480612e0b5750612df6612e88565b6001600160a01b0316826001600160a01b0316145b80612e2e5750612e1961252c565b6001600160a01b0316826001600160a01b0316145b806129c35750612e3c6126c7565b6001600160a01b0316826001600160a01b0316149050919050565b6000612e6282612997565b80156129c35750612e7282612da2565b1592915050565b603b546001600160a01b031690565b603c546001600160a01b031690565b6000612eac836001600160a01b038416613856565b9392505050565b6000612eac836001600160a01b0384166138a0565b600082820183811015612eac576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b505050565b3390565b6000828152603360205260408120612eac908363ffffffff612eb316565b6001600160a01b038316612f8e5760405162461bcd60e51b815260040180806020018281038252602481526020018061435b6024913960400191505060405180910390fd5b6001600160a01b038216612fd35760405162461bcd60e51b815260040180806020018281038252602281526020018061408c6022913960400191505060405180910390fd5b612fde8383836138b8565b6001600160a01b0392831660009081526035602090815260408083209490951682529290925291902055565b6001600160a01b038216613065576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61307160008383613b0f565b603654613084908263ffffffff612ec816565b6036556001600160a01b0382166000908152603460205260409020546130b0908263ffffffff612ec816565b6001600160a01b0390921660009081526034602052604090209190915550565b6001600160a01b0383166131155760405162461bcd60e51b81526004018080602001828103825260258152602001806142ed6025913960400191505060405180910390fd5b6001600160a01b03821661315a5760405162461bcd60e51b8152600401808060200182810382526023815260200180613f686023913960400191505060405180910390fd5b613165838383613b0f565b6131a8816040518060600160405280602681526020016140fe602691396001600160a01b038616600090815260346020526040902054919063ffffffff6137bf16565b6001600160a01b0380851660009081526034602052604080822093909355908416815220546131dd908263ffffffff612ec816565b6001600160a01b039092166000908152603460205260409020919091555050565b60008281526033602052604090206002015461321c90610d1b612f27565b6132575760405162461bcd60e51b815260040180806020018281038252603081526020018061414c6030913960400191505060405180910390fd5b6132618282613e55565b5050565b6132708383836130d0565b612f228361327c612f27565b6132e1846040518060600160405280602881526020016141f8602891396001600160a01b0389166000908152603560205260408120906132ba612f27565b6001600160a01b03168152602081019190915260400160002054919063ffffffff6137bf16565b612f49565b60005460ff1661333d576040805162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b6000805460ff19169055565b6001600160a01b03821661338e5760405162461bcd60e51b81526004018080602001828103825260218152602001806142a36021913960400191505060405180910390fd5b61339a82600083613b0f565b6133dd81604051806060016040528060228152602001614015602291396001600160a01b038516600090815260346020526040902054919063ffffffff6137bf16565b6001600160a01b038316600090815260346020526040902055603654613409908263ffffffff61357916565b6036555050565b612f2261341b612f27565b8484846135bb565b6001546001600160a01b0316613437612f27565b6001600160a01b03161461347c5760405162461bcd60e51b815260040180806020018281038252602f8152602001806140ae602f913960400191505060405180910390fd5b60018054600080547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038085168202929092179283905573ffffffffffffffffffffffffffffffffffffffff199093169093556040805192909104909216815290517f85a8c8100c1d48466310240af79644f50cdae7d09cb4820d60dfc5b2462f0fd0916020908290030190a1565b6132618282613e73565b60008281526033602052604090206002015461353e90610d1b612f27565b6135165760405162461bcd60e51b815260040180806020018281038252602f815260200180613fb3602f913960400191505060405180910390fd5b6000612eac83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506137bf565b60006135c5612f27565b6001600160a01b03161415613621576040805162461bcd60e51b815260206004820152601d60248201527f417070726f76652066726f6d20746865207a65726f2061646472657373000000604482015290519081900360640190fd5b6001600160a01b03841661367c576040805162461bcd60e51b815260206004820152601c60248201527f417070726f766520666f7220746865207a65726f206164647265737300000000604482015290519081900360640190fd5b80603a6000866001600160a01b03166001600160a01b03168152602001908152602001600020846040518082805190602001908083835b602083106136d25780518252601f1990920191602091820191016136b3565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842087519094889450925082918401908083835b6020831061372e5780518252601f19909201916020918201910161370f565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092909255505050505050565b60005460ff16156137b0576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff19166001179055565b6000818484111561384e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156138135781810151838201526020016137fb565b50505050905090810190601f1680156138405780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600061386283836138a0565b613898575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556129c3565b5060006129c3565b60009081526001919091016020526040902054151590565b604080516912d650d7d41054d4d15160b21b8152905190819003600a0190206138e390610d1b612f27565b61391e5760405162461bcd60e51b815260040180806020018281038252602c81526020018061417c602c913960400191505060405180910390fd5b6040805165232927ad22a760d11b8152905190819003600601902061394590610d1b612f27565b156139815760405162461bcd60e51b8152600401808060200182810382526033815260200180613fe26033913960400191505060405180910390fd5b60005460ff16156139cc576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6139d582612997565b613a105760405162461bcd60e51b81526004018080602001828103825260298152602001806142c46029913960400191505060405180910390fd5b613a1983612997565b613a545760405162461bcd60e51b81526004018080602001828103825260288152602001806141246028913960400191505060405180910390fd5b613a5d82612da2565b15613aaf576040805162461bcd60e51b815260206004820152601a60248201527f5370656e646572206163636f756e742069732066726f7a656e2e000000000000604482015290519081900360640190fd5b613ab883612da2565b15613b0a576040805162461bcd60e51b815260206004820152601960248201527f53656e646572206163636f756e742069732066726f7a656e2e00000000000000604482015290519081900360640190fd5b612f22565b604080516912d650d7d41054d4d15160b21b8152905190819003600a019020613b3a90610d1b612f27565b613b755760405162461bcd60e51b815260040180806020018281038252602c81526020018061417c602c913960400191505060405180910390fd5b6040805165232927ad22a760d11b81529051908190036006019020613b9c90610d1b612f27565b15613bd85760405162461bcd60e51b8152600401808060200182810382526033815260200180613fe26033913960400191505060405180910390fd5b60005460ff1615613c23576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b613c2b612e79565b6001600160a01b0316836001600160a01b0316148015613c5257506001600160a01b038216155b15613c6257613b0a838383612f22565b613c6a612e79565b6001600160a01b0316826001600160a01b0316148015613c9157506001600160a01b038316155b15613ca157613b0a838383612f22565b613ca9612e79565b6001600160a01b0316826001600160a01b0316148015613ce957506040805165232927ad22a760d11b81529051908190036006019020613ce99084612f2b565b8015613cfc5750613cf983611f72565b81145b15613d0c57613b0a838383612f22565b613d1583612997565b613d505760405162461bcd60e51b81526004018080602001828103825260288152602001806141246028913960400191505060405180910390fd5b613d5982612997565b613d945760405162461bcd60e51b815260040180806020018281038252602a8152602001806143d6602a913960400191505060405180910390fd5b613d9d83612da2565b15613def576040805162461bcd60e51b815260206004820152601960248201527f53656e646572206163636f756e742069732066726f7a656e2e00000000000000604482015290519081900360640190fd5b613df882612da2565b15613e4a576040805162461bcd60e51b815260206004820152601b60248201527f5265636569766572206163636f756e742069732066726f7a656e2e0000000000604482015290519081900360640190fd5b612f22838383612f22565b6000828152603360205260409020612f22908263ffffffff613e9116565b6000828152603360205260409020612f22908263ffffffff612e9716565b6000612eac836001600160a01b03841660008181526001830160205260408120548015613f5d5783546000198083019190810190600090879083908110613ed457fe5b9060005260206000200154905080876000018481548110613ef157fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080613f2157fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506129c3565b60009150506129c356fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737343616e6e6f74206368616e676520636f6d706c69616e6365206d616e6167657220746f203078302e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74596f7572206163636f756e7420686173206265656e2066726f7a656e2c2063616e6e6f742063616c6c2066756e6374696f6e2e45524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e6374696f6e2e4f6e6c792074686520737570706c79206d616e616765722063616e2063616c6c20746869732066756e6374696f6e2e45524332303a20617070726f766520746f20746865207a65726f20616464726573734f6e6c79207468652070726f706f736564206f776e65722063616e2063616c6c20746869732066756e6374696f6e2e43616e6e6f7420756e736574204b594320666f722061646472657373203078302e45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636553656e646572206163636f756e74207265717569726573204b594320746f20636f6e74696e75652e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b6543616c6c696e6720746869732066756e6374696f6e207265717569726573204b594320617070726f76616c2e526563697069656e74206163636f756e74207265717569726573204b594320746f20636f6e74696e75652e416d6f756e742063616e6e6f742062652067726561746572207468616e2062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636543616e6e6f7420756e736574204b594320666f722061646d696e6973747261746f72206163636f756e742e4f6e6c792074686520456e666f7263656d656e74204d616e616765722063616e2063616c6c20746869732066756e6374696f6e2e43616e6e6f74206368616e676520737570706c79206d616e6167657220746f203078302e45524332303a206275726e2066726f6d20746865207a65726f20616464726573735370656e646572206163636f756e74207265717569726573204b594320746f20636f6e74696e75652e45524332303a207472616e736665722066726f6d20746865207a65726f206164647265737343616e6e6f74206368616e676520656e666f7263656d656e74206d616e6167657220746f2030783043616e6e6f7420617070726f7665206d6f7265207468616e2062616c616e63652e45524332303a20617070726f76652066726f6d20746865207a65726f206164647265737343616e6e6f7420667265657a652061646d696e6973747261746f72206163636f756e742e4f6e6c792074686520436f6d706c69616e6365204d616e616765722063616e2063616c6c20746869732066756e6374696f6e2e5265636569766572206163636f756e74207265717569726573204b594320746f20636f6e74696e75652ea2646970667358221220118b5b628cd1760848bc0739edb07775d969da84e3d0279afddbbc5e6eefdd1264736f6c63430006080033416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74596f7572206163636f756e7420686173206265656e2066726f7a656e2c2063616e6e6f742063616c6c2066756e6374696f6e2e4f6e6c792074686520737570706c79206d616e616765722063616e2063616c6c20746869732066756e6374696f6e2e53656e646572206163636f756e74207265717569726573204b594320746f20636f6e74696e75652e43616c6c696e6720746869732066756e6374696f6e207265717569726573204b594320617070726f76616c2e5265636569766572206163636f756e74207265717569726573204b594320746f20636f6e74696e75652e";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_EXTERNALALLOWANCEOF = "externalAllowanceOf";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PROPOSEOWNER = "proposeOwner";

    public static final String FUNC_PROPOSEDOWNER = "proposedOwner";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_SUPPLYMANAGER = "supplyManager";

    public static final String FUNC_CHANGESUPPLYMANAGER = "changeSupplyManager";

    public static final String FUNC_COMPLIANCEMANAGER = "complianceManager";

    public static final String FUNC_CHANGECOMPLIANCEMANAGER = "changeComplianceManager";

    public static final String FUNC_ENFORCEMENTMANAGER = "enforcementManager";

    public static final String FUNC_CHANGEENFORCEMENTMANAGER = "changeEnforcementManager";

    public static final String FUNC_ISPRIVILEGEDROLE = "isPrivilegedRole";

    public static final String FUNC_ISKYCPASSED = "isKycPassed";

    public static final String FUNC_SETKYCPASSED = "setKycPassed";

    public static final String FUNC_UNSETKYCPASSED = "unsetKycPassed";

    public static final String FUNC_ISFROZEN = "isFrozen";

    public static final String FUNC_FREEZE = "freeze";

    public static final String FUNC_UNFREEZE = "unfreeze";

    public static final String FUNC_CHECKTRANSFERALLOWED = "checkTransferAllowed";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_CLAIMOWNERSHIP = "claimOwnership";

    public static final String FUNC_WIPE = "wipe";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_APPROVEEXTERNALTRANSFER = "approveExternalTransfer";

    public static final String FUNC_EXTERNALTRANSFER = "externalTransfer";

    public static final String FUNC_EXTERNALTRANSFERFROM = "externalTransferFrom";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_APPROVEALLOWANCE = "approveAllowance";

    public static final String FUNC_INCREASEALLOWANCE = "increaseAllowance";

    public static final String FUNC_DECREASEALLOWANCE = "decreaseAllowance";

    public static final Event APPROVE_EVENT = new Event("Approve", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVEEXTERNALTRANSFER_EVENT = new Event("ApproveExternalTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BURN_EVENT = new Event("Burn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CHANGECOMPLIANCEMANAGER_EVENT = new Event("ChangeComplianceManager", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event CHANGEENFORCEMENTMANAGER_EVENT = new Event("ChangeEnforcementManager", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event CHANGESUPPLYMANAGER_EVENT = new Event("ChangeSupplyManager", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event CLAIMOWNERSHIP_EVENT = new Event("ClaimOwnership", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event CONSTRUCTED_EVENT = new Event("Constructed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event DECREASEALLOWANCE_EVENT = new Event("DecreaseAllowance", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EXTERNALTRANSFER_EVENT = new Event("ExternalTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EXTERNALTRANSFERFROM_EVENT = new Event("ExternalTransferFrom", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FREEZE_EVENT = new Event("Freeze", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event INCREASEALLOWANCE_EVENT = new Event("IncreaseAllowance", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event MINT_EVENT = new Event("Mint", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PAUSE_EVENT = new Event("Pause", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event PROPOSEOWNER_EVENT = new Event("ProposeOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event SETKYCPASSED_EVENT = new Event("SetKycPassed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNFREEZE_EVENT = new Event("Unfreeze", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event UNPAUSE_EVENT = new Event("Unpause", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event UNSETKYCPASSED_EVENT = new Event("UnsetKycPassed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event WIPE_EVENT = new Event("Wipe", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected StableCoin(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected StableCoin(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected StableCoin(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected StableCoin(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApproveEventResponse> getApproveEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVE_EVENT, transactionReceipt);
        ArrayList<ApproveEventResponse> responses = new ArrayList<ApproveEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApproveEventResponse typedResponse = new ApproveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApproveEventResponse> approveEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApproveEventResponse>() {
            @Override
            public ApproveEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVE_EVENT, log);
                ApproveEventResponse typedResponse = new ApproveEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApproveEventResponse> approveEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVE_EVENT));
        return approveEventFlowable(filter);
    }

    public List<ApproveExternalTransferEventResponse> getApproveExternalTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEEXTERNALTRANSFER_EVENT, transactionReceipt);
        ArrayList<ApproveExternalTransferEventResponse> responses = new ArrayList<ApproveExternalTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApproveExternalTransferEventResponse typedResponse = new ApproveExternalTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.networkURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApproveExternalTransferEventResponse> approveExternalTransferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApproveExternalTransferEventResponse>() {
            @Override
            public ApproveExternalTransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVEEXTERNALTRANSFER_EVENT, log);
                ApproveExternalTransferEventResponse typedResponse = new ApproveExternalTransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.networkURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.to = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApproveExternalTransferEventResponse> approveExternalTransferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVEEXTERNALTRANSFER_EVENT));
        return approveExternalTransferEventFlowable(filter);
    }

    public List<BurnEventResponse> getBurnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BURN_EVENT, transactionReceipt);
        ArrayList<BurnEventResponse> responses = new ArrayList<BurnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BurnEventResponse typedResponse = new BurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BurnEventResponse> burnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BurnEventResponse>() {
            @Override
            public BurnEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BURN_EVENT, log);
                BurnEventResponse typedResponse = new BurnEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BurnEventResponse> burnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BURN_EVENT));
        return burnEventFlowable(filter);
    }

    public List<ChangeComplianceManagerEventResponse> getChangeComplianceManagerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHANGECOMPLIANCEMANAGER_EVENT, transactionReceipt);
        ArrayList<ChangeComplianceManagerEventResponse> responses = new ArrayList<ChangeComplianceManagerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChangeComplianceManagerEventResponse typedResponse = new ChangeComplianceManagerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newComplianceManager = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChangeComplianceManagerEventResponse> changeComplianceManagerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ChangeComplianceManagerEventResponse>() {
            @Override
            public ChangeComplianceManagerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHANGECOMPLIANCEMANAGER_EVENT, log);
                ChangeComplianceManagerEventResponse typedResponse = new ChangeComplianceManagerEventResponse();
                typedResponse.log = log;
                typedResponse.newComplianceManager = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChangeComplianceManagerEventResponse> changeComplianceManagerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANGECOMPLIANCEMANAGER_EVENT));
        return changeComplianceManagerEventFlowable(filter);
    }

    public List<ChangeEnforcementManagerEventResponse> getChangeEnforcementManagerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHANGEENFORCEMENTMANAGER_EVENT, transactionReceipt);
        ArrayList<ChangeEnforcementManagerEventResponse> responses = new ArrayList<ChangeEnforcementManagerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChangeEnforcementManagerEventResponse typedResponse = new ChangeEnforcementManagerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newEnforcementManager = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChangeEnforcementManagerEventResponse> changeEnforcementManagerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ChangeEnforcementManagerEventResponse>() {
            @Override
            public ChangeEnforcementManagerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHANGEENFORCEMENTMANAGER_EVENT, log);
                ChangeEnforcementManagerEventResponse typedResponse = new ChangeEnforcementManagerEventResponse();
                typedResponse.log = log;
                typedResponse.newEnforcementManager = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChangeEnforcementManagerEventResponse> changeEnforcementManagerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANGEENFORCEMENTMANAGER_EVENT));
        return changeEnforcementManagerEventFlowable(filter);
    }

    public List<ChangeSupplyManagerEventResponse> getChangeSupplyManagerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHANGESUPPLYMANAGER_EVENT, transactionReceipt);
        ArrayList<ChangeSupplyManagerEventResponse> responses = new ArrayList<ChangeSupplyManagerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChangeSupplyManagerEventResponse typedResponse = new ChangeSupplyManagerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newSupplyManager = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChangeSupplyManagerEventResponse> changeSupplyManagerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ChangeSupplyManagerEventResponse>() {
            @Override
            public ChangeSupplyManagerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHANGESUPPLYMANAGER_EVENT, log);
                ChangeSupplyManagerEventResponse typedResponse = new ChangeSupplyManagerEventResponse();
                typedResponse.log = log;
                typedResponse.newSupplyManager = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChangeSupplyManagerEventResponse> changeSupplyManagerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANGESUPPLYMANAGER_EVENT));
        return changeSupplyManagerEventFlowable(filter);
    }

    public List<ClaimOwnershipEventResponse> getClaimOwnershipEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLAIMOWNERSHIP_EVENT, transactionReceipt);
        ArrayList<ClaimOwnershipEventResponse> responses = new ArrayList<ClaimOwnershipEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClaimOwnershipEventResponse typedResponse = new ClaimOwnershipEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClaimOwnershipEventResponse> claimOwnershipEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ClaimOwnershipEventResponse>() {
            @Override
            public ClaimOwnershipEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLAIMOWNERSHIP_EVENT, log);
                ClaimOwnershipEventResponse typedResponse = new ClaimOwnershipEventResponse();
                typedResponse.log = log;
                typedResponse.newOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ClaimOwnershipEventResponse> claimOwnershipEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLAIMOWNERSHIP_EVENT));
        return claimOwnershipEventFlowable(filter);
    }

    public List<ConstructedEventResponse> getConstructedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CONSTRUCTED_EVENT, transactionReceipt);
        ArrayList<ConstructedEventResponse> responses = new ArrayList<ConstructedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ConstructedEventResponse typedResponse = new ConstructedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenSymbol = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenDecimal = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.totalSupply = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.supplyManager = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.complianceManager = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.enforcementManager = (String) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ConstructedEventResponse> constructedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ConstructedEventResponse>() {
            @Override
            public ConstructedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CONSTRUCTED_EVENT, log);
                ConstructedEventResponse typedResponse = new ConstructedEventResponse();
                typedResponse.log = log;
                typedResponse.tokenName = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokenSymbol = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenDecimal = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.totalSupply = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.supplyManager = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.complianceManager = (String) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.enforcementManager = (String) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ConstructedEventResponse> constructedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONSTRUCTED_EVENT));
        return constructedEventFlowable(filter);
    }

    public List<DecreaseAllowanceEventResponse> getDecreaseAllowanceEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DECREASEALLOWANCE_EVENT, transactionReceipt);
        ArrayList<DecreaseAllowanceEventResponse> responses = new ArrayList<DecreaseAllowanceEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DecreaseAllowanceEventResponse typedResponse = new DecreaseAllowanceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DecreaseAllowanceEventResponse> decreaseAllowanceEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DecreaseAllowanceEventResponse>() {
            @Override
            public DecreaseAllowanceEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DECREASEALLOWANCE_EVENT, log);
                DecreaseAllowanceEventResponse typedResponse = new DecreaseAllowanceEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DecreaseAllowanceEventResponse> decreaseAllowanceEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DECREASEALLOWANCE_EVENT));
        return decreaseAllowanceEventFlowable(filter);
    }

    public List<ExternalTransferEventResponse> getExternalTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXTERNALTRANSFER_EVENT, transactionReceipt);
        ArrayList<ExternalTransferEventResponse> responses = new ArrayList<ExternalTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExternalTransferEventResponse typedResponse = new ExternalTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.networkURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExternalTransferEventResponse> externalTransferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ExternalTransferEventResponse>() {
            @Override
            public ExternalTransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EXTERNALTRANSFER_EVENT, log);
                ExternalTransferEventResponse typedResponse = new ExternalTransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.networkURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.to = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExternalTransferEventResponse> externalTransferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXTERNALTRANSFER_EVENT));
        return externalTransferEventFlowable(filter);
    }

    public List<ExternalTransferFromEventResponse> getExternalTransferFromEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXTERNALTRANSFERFROM_EVENT, transactionReceipt);
        ArrayList<ExternalTransferFromEventResponse> responses = new ArrayList<ExternalTransferFromEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExternalTransferFromEventResponse typedResponse = new ExternalTransferFromEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.networkURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExternalTransferFromEventResponse> externalTransferFromEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ExternalTransferFromEventResponse>() {
            @Override
            public ExternalTransferFromEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EXTERNALTRANSFERFROM_EVENT, log);
                ExternalTransferFromEventResponse typedResponse = new ExternalTransferFromEventResponse();
                typedResponse.log = log;
                typedResponse.from = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.networkURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExternalTransferFromEventResponse> externalTransferFromEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXTERNALTRANSFERFROM_EVENT));
        return externalTransferFromEventFlowable(filter);
    }

    public List<FreezeEventResponse> getFreezeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FREEZE_EVENT, transactionReceipt);
        ArrayList<FreezeEventResponse> responses = new ArrayList<FreezeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FreezeEventResponse typedResponse = new FreezeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FreezeEventResponse> freezeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, FreezeEventResponse>() {
            @Override
            public FreezeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FREEZE_EVENT, log);
                FreezeEventResponse typedResponse = new FreezeEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FreezeEventResponse> freezeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FREEZE_EVENT));
        return freezeEventFlowable(filter);
    }

    public List<IncreaseAllowanceEventResponse> getIncreaseAllowanceEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INCREASEALLOWANCE_EVENT, transactionReceipt);
        ArrayList<IncreaseAllowanceEventResponse> responses = new ArrayList<IncreaseAllowanceEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IncreaseAllowanceEventResponse typedResponse = new IncreaseAllowanceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IncreaseAllowanceEventResponse> increaseAllowanceEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IncreaseAllowanceEventResponse>() {
            @Override
            public IncreaseAllowanceEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INCREASEALLOWANCE_EVENT, log);
                IncreaseAllowanceEventResponse typedResponse = new IncreaseAllowanceEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IncreaseAllowanceEventResponse> increaseAllowanceEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INCREASEALLOWANCE_EVENT));
        return increaseAllowanceEventFlowable(filter);
    }

    public List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MINT_EVENT, transactionReceipt);
        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintEventResponse typedResponse = new MintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintEventResponse> mintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MintEventResponse>() {
            @Override
            public MintEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MINT_EVENT, log);
                MintEventResponse typedResponse = new MintEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintEventResponse> mintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINT_EVENT));
        return mintEventFlowable(filter);
    }

    public List<PauseEventResponse> getPauseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSE_EVENT, transactionReceipt);
        ArrayList<PauseEventResponse> responses = new ArrayList<PauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PauseEventResponse typedResponse = new PauseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PauseEventResponse> pauseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PauseEventResponse>() {
            @Override
            public PauseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSE_EVENT, log);
                PauseEventResponse typedResponse = new PauseEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PauseEventResponse> pauseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSE_EVENT));
        return pauseEventFlowable(filter);
    }

    public List<ProposeOwnerEventResponse> getProposeOwnerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PROPOSEOWNER_EVENT, transactionReceipt);
        ArrayList<ProposeOwnerEventResponse> responses = new ArrayList<ProposeOwnerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposeOwnerEventResponse typedResponse = new ProposeOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposedOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProposeOwnerEventResponse> proposeOwnerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProposeOwnerEventResponse>() {
            @Override
            public ProposeOwnerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROPOSEOWNER_EVENT, log);
                ProposeOwnerEventResponse typedResponse = new ProposeOwnerEventResponse();
                typedResponse.log = log;
                typedResponse.proposedOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProposeOwnerEventResponse> proposeOwnerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSEOWNER_EVENT));
        return proposeOwnerEventFlowable(filter);
    }

    public List<SetKycPassedEventResponse> getSetKycPassedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETKYCPASSED_EVENT, transactionReceipt);
        ArrayList<SetKycPassedEventResponse> responses = new ArrayList<SetKycPassedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetKycPassedEventResponse typedResponse = new SetKycPassedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetKycPassedEventResponse> setKycPassedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetKycPassedEventResponse>() {
            @Override
            public SetKycPassedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETKYCPASSED_EVENT, log);
                SetKycPassedEventResponse typedResponse = new SetKycPassedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetKycPassedEventResponse> setKycPassedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETKYCPASSED_EVENT));
        return setKycPassedEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.recipient = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.recipient = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<UnfreezeEventResponse> getUnfreezeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNFREEZE_EVENT, transactionReceipt);
        ArrayList<UnfreezeEventResponse> responses = new ArrayList<UnfreezeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnfreezeEventResponse typedResponse = new UnfreezeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnfreezeEventResponse> unfreezeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnfreezeEventResponse>() {
            @Override
            public UnfreezeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNFREEZE_EVENT, log);
                UnfreezeEventResponse typedResponse = new UnfreezeEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnfreezeEventResponse> unfreezeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNFREEZE_EVENT));
        return unfreezeEventFlowable(filter);
    }

    public List<UnpauseEventResponse> getUnpauseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSE_EVENT, transactionReceipt);
        ArrayList<UnpauseEventResponse> responses = new ArrayList<UnpauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpauseEventResponse typedResponse = new UnpauseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpauseEventResponse> unpauseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpauseEventResponse>() {
            @Override
            public UnpauseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSE_EVENT, log);
                UnpauseEventResponse typedResponse = new UnpauseEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnpauseEventResponse> unpauseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSE_EVENT));
        return unpauseEventFlowable(filter);
    }

    public List<UnsetKycPassedEventResponse> getUnsetKycPassedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNSETKYCPASSED_EVENT, transactionReceipt);
        ArrayList<UnsetKycPassedEventResponse> responses = new ArrayList<UnsetKycPassedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnsetKycPassedEventResponse typedResponse = new UnsetKycPassedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnsetKycPassedEventResponse> unsetKycPassedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnsetKycPassedEventResponse>() {
            @Override
            public UnsetKycPassedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNSETKYCPASSED_EVENT, log);
                UnsetKycPassedEventResponse typedResponse = new UnsetKycPassedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnsetKycPassedEventResponse> unsetKycPassedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNSETKYCPASSED_EVENT));
        return unsetKycPassedEventFlowable(filter);
    }

    public List<WipeEventResponse> getWipeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WIPE_EVENT, transactionReceipt);
        ArrayList<WipeEventResponse> responses = new ArrayList<WipeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WipeEventResponse typedResponse = new WipeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WipeEventResponse> wipeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WipeEventResponse>() {
            @Override
            public WipeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WIPE_EVENT, log);
                WipeEventResponse typedResponse = new WipeEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WipeEventResponse> wipeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WIPE_EVENT));
        return wipeEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> allowance(String owner, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(spender)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> balanceOf(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> decimals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> externalAllowanceOf(String owner, String networkURI, byte[] externalAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXTERNALALLOWANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Utf8String(networkURI), 
                new org.web3j.abi.datatypes.DynamicBytes(externalAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NAME, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> proposeOwner(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PROPOSEOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> proposedOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PROPOSEDOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> supplyManager() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SUPPLYMANAGER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> changeSupplyManager(String newSupplyManager) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGESUPPLYMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newSupplyManager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> complianceManager() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_COMPLIANCEMANAGER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> changeComplianceManager(String newComplianceManager) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGECOMPLIANCEMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newComplianceManager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> enforcementManager() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ENFORCEMENTMANAGER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> changeEnforcementManager(String newEnforcementManager) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGEENFORCEMENTMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newEnforcementManager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> isPrivilegedRole(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ISPRIVILEGEDROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> isKycPassed(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ISKYCPASSED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setKycPassed(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETKYCPASSED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unsetKycPassed(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNSETKYCPASSED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> isFrozen(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ISFROZEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> freeze(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unfreeze(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> checkTransferAllowed(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHECKTRANSFERALLOWED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> claimOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLAIMOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> wipe(String account, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WIPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approveExternalTransfer(String networkURI, byte[] externalAddress, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVEEXTERNALTRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(networkURI), 
                new org.web3j.abi.datatypes.DynamicBytes(externalAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> externalTransfer(String from, String networkURI, byte[] to, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXTERNALTRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Utf8String(networkURI), 
                new org.web3j.abi.datatypes.DynamicBytes(to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> externalTransferFrom(byte[] from, String networkURI, String to, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXTERNALTRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(from), 
                new org.web3j.abi.datatypes.Utf8String(networkURI), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approveAllowance(String spender, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(spender), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseAllowance(String spender, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(spender), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> decreaseAllowance(String spender, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DECREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(spender), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static StableCoin load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new StableCoin(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static StableCoin load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new StableCoin(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static StableCoin load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new StableCoin(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static StableCoin load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new StableCoin(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<StableCoin> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String tokenName, String tokenSymbol, BigInteger tokenDecimal, BigInteger totalSupply, String supplyManager, String complianceManager, String enforcementManager) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tokenName), 
                new org.web3j.abi.datatypes.Utf8String(tokenSymbol), 
                new org.web3j.abi.datatypes.generated.Uint8(tokenDecimal), 
                new org.web3j.abi.datatypes.generated.Uint256(totalSupply), 
                new org.web3j.abi.datatypes.Address(supplyManager), 
                new org.web3j.abi.datatypes.Address(complianceManager), 
                new org.web3j.abi.datatypes.Address(enforcementManager)));
        return deployRemoteCall(StableCoin.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<StableCoin> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String tokenName, String tokenSymbol, BigInteger tokenDecimal, BigInteger totalSupply, String supplyManager, String complianceManager, String enforcementManager) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tokenName), 
                new org.web3j.abi.datatypes.Utf8String(tokenSymbol), 
                new org.web3j.abi.datatypes.generated.Uint8(tokenDecimal), 
                new org.web3j.abi.datatypes.generated.Uint256(totalSupply), 
                new org.web3j.abi.datatypes.Address(supplyManager), 
                new org.web3j.abi.datatypes.Address(complianceManager), 
                new org.web3j.abi.datatypes.Address(enforcementManager)));
        return deployRemoteCall(StableCoin.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<StableCoin> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String tokenName, String tokenSymbol, BigInteger tokenDecimal, BigInteger totalSupply, String supplyManager, String complianceManager, String enforcementManager) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tokenName), 
                new org.web3j.abi.datatypes.Utf8String(tokenSymbol), 
                new org.web3j.abi.datatypes.generated.Uint8(tokenDecimal), 
                new org.web3j.abi.datatypes.generated.Uint256(totalSupply), 
                new org.web3j.abi.datatypes.Address(supplyManager), 
                new org.web3j.abi.datatypes.Address(complianceManager), 
                new org.web3j.abi.datatypes.Address(enforcementManager)));
        return deployRemoteCall(StableCoin.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<StableCoin> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String tokenName, String tokenSymbol, BigInteger tokenDecimal, BigInteger totalSupply, String supplyManager, String complianceManager, String enforcementManager) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tokenName), 
                new org.web3j.abi.datatypes.Utf8String(tokenSymbol), 
                new org.web3j.abi.datatypes.generated.Uint8(tokenDecimal), 
                new org.web3j.abi.datatypes.generated.Uint256(totalSupply), 
                new org.web3j.abi.datatypes.Address(supplyManager), 
                new org.web3j.abi.datatypes.Address(complianceManager), 
                new org.web3j.abi.datatypes.Address(enforcementManager)));
        return deployRemoteCall(StableCoin.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ApproveEventResponse extends BaseEventResponse {
        public String sender;

        public String spender;

        public BigInteger amount;
    }

    public static class ApproveExternalTransferEventResponse extends BaseEventResponse {
        public String from;

        public String networkURI;

        public byte[] to;

        public BigInteger amount;
    }

    public static class BurnEventResponse extends BaseEventResponse {
        public String account;

        public BigInteger amount;
    }

    public static class ChangeComplianceManagerEventResponse extends BaseEventResponse {
        public String newComplianceManager;
    }

    public static class ChangeEnforcementManagerEventResponse extends BaseEventResponse {
        public String newEnforcementManager;
    }

    public static class ChangeSupplyManagerEventResponse extends BaseEventResponse {
        public String newSupplyManager;
    }

    public static class ClaimOwnershipEventResponse extends BaseEventResponse {
        public String newOwner;
    }

    public static class ConstructedEventResponse extends BaseEventResponse {
        public String tokenName;

        public String tokenSymbol;

        public BigInteger tokenDecimal;

        public BigInteger totalSupply;

        public String supplyManager;

        public String complianceManager;

        public String enforcementManager;
    }

    public static class DecreaseAllowanceEventResponse extends BaseEventResponse {
        public String sender;

        public String spender;

        public BigInteger amount;
    }

    public static class ExternalTransferEventResponse extends BaseEventResponse {
        public String from;

        public String networkURI;

        public byte[] to;

        public BigInteger amount;
    }

    public static class ExternalTransferFromEventResponse extends BaseEventResponse {
        public byte[] from;

        public String networkURI;

        public String to;

        public BigInteger amount;
    }

    public static class FreezeEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class IncreaseAllowanceEventResponse extends BaseEventResponse {
        public String sender;

        public String spender;

        public BigInteger amount;
    }

    public static class MintEventResponse extends BaseEventResponse {
        public String account;

        public BigInteger amount;
    }

    public static class PauseEventResponse extends BaseEventResponse {
        public String sender;
    }

    public static class ProposeOwnerEventResponse extends BaseEventResponse {
        public String proposedOwner;
    }

    public static class SetKycPassedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String sender;

        public String recipient;

        public BigInteger amount;
    }

    public static class UnfreezeEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class UnpauseEventResponse extends BaseEventResponse {
        public String sender;
    }

    public static class UnsetKycPassedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class WipeEventResponse extends BaseEventResponse {
        public String account;

        public BigInteger amount;
    }
}
