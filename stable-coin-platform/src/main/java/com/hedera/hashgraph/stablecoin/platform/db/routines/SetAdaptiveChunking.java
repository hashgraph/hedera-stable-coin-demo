/*
 * This file is generated by jOOQ.
 */
package com.hedera.hashgraph.stablecoin.platform.db.routines;


import com.hedera.hashgraph.stablecoin.platform.db.Public;

import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.Internal;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SetAdaptiveChunking extends AbstractRoutine<java.lang.Void> {

    private static final long serialVersionUID = 1373774974;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public static final Parameter<Object> HYPERTABLE = Internal.createParameter("hypertable", org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regclass\""), false, false);

    /**
     * The parameter <code>public.set_adaptive_chunking.chunk_target_size</code>.
     */
    public static final Parameter<String> CHUNK_TARGET_SIZE2 = Internal.createParameter("chunk_target_size", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>public.set_adaptive_chunking.chunk_sizing_func</code>.
     */
    public static final Parameter<String> CHUNK_SIZING_FUNC = Internal.createParameter("chunk_sizing_func", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("'_timescaledb_internal.calculate_chunk_interval'::regproc", org.jooq.impl.SQLDataType.VARCHAR)), true, false);

    /**
     * The parameter <code>public.set_adaptive_chunking.chunk_target_size</code>.
     */
    public static final Parameter<Long> CHUNK_TARGET_SIZE4 = Internal.createParameter("chunk_target_size", org.jooq.impl.SQLDataType.BIGINT, false, false);

    /**
     * Create a new routine call instance
     */
    public SetAdaptiveChunking() {
        super("set_adaptive_chunking", Public.PUBLIC);

        addInParameter(HYPERTABLE);
        addInOutParameter(CHUNK_TARGET_SIZE2);
        addInOutParameter(CHUNK_SIZING_FUNC);
        addInOutParameter(CHUNK_TARGET_SIZE4);
    }

    /**
     * Set the <code>hypertable</code> parameter IN value to the routine
     */
    public void setHypertable(Object value) {
        setValue(HYPERTABLE, value);
    }

    /**
     * Set the <code>chunk_target_size</code> parameter IN value to the routine
     */
    public void setChunkTargetSize2(String value) {
        setValue(CHUNK_TARGET_SIZE2, value);
    }

    /**
     * Set the <code>chunk_sizing_func</code> parameter IN value to the routine
     */
    public void setChunkSizingFunc(String value) {
        setValue(CHUNK_SIZING_FUNC, value);
    }

    /**
     * Get the <code>chunk_target_size</code> parameter OUT value from the routine
     */
    public String getChunkTargetSize2() {
        return get(CHUNK_TARGET_SIZE2);
    }

    /**
     * Get the <code>chunk_sizing_func</code> parameter OUT value from the routine
     */
    public String getChunkSizingFunc() {
        return get(CHUNK_SIZING_FUNC);
    }

    /**
     * Get the <code>chunk_target_size</code> parameter OUT value from the routine
     */
    public Long getChunkTargetSize4() {
        return get(CHUNK_TARGET_SIZE4);
    }
}
